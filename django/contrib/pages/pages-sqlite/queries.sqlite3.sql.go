// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: queries.sqlite3.sql

package models_sqlite

import (
	"context"
	"database/sql"

	"github.com/Nigel2392/django/contrib/pages/models"
)

const deleteNode = `-- name: DeleteNode :exec
DELETE FROM PageNode
WHERE id = ?1
`

func (q *Queries) DeleteNode(ctx context.Context, id sql.NullInt64) error {
	_, err := q.db.ExecContext(ctx, deleteNode, id)
	return err
}

const getChildren = `-- name: GetChildren :many
SELECT id, title, path, depth, numchild, typeHash
FROM PageNode
WHERE path LIKE CONCAT(?1, '%') AND depth = ?2 + 1
`

func (q *Queries) GetChildren(ctx context.Context, path interface{}, depth interface{}) ([]models.PageNode, error) {
	rows, err := q.db.QueryContext(ctx, getChildren, path, depth)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []models.PageNode
	for rows.Next() {
		var i models.PageNode
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Path,
			&i.Depth,
			&i.Numchild,
			&i.Typehash,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDescendants = `-- name: GetDescendants :many
SELECT id, title, path, depth, numchild, typeHash
FROM PageNode
WHERE path LIKE CONCAT(?1, '%') AND depth > ?2
`

func (q *Queries) GetDescendants(ctx context.Context, path interface{}, depth sql.NullInt64) ([]models.PageNode, error) {
	rows, err := q.db.QueryContext(ctx, getDescendants, path, depth)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []models.PageNode
	for rows.Next() {
		var i models.PageNode
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Path,
			&i.Depth,
			&i.Numchild,
			&i.Typehash,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNodeByID = `-- name: GetNodeByID :one
SELECT id, title, path, depth, numchild, typeHash
FROM PageNode
WHERE id = ?1
`

func (q *Queries) GetNodeByID(ctx context.Context, id sql.NullInt64) (models.PageNode, error) {
	row := q.db.QueryRowContext(ctx, getNodeByID, id)
	var i models.PageNode
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Path,
		&i.Depth,
		&i.Numchild,
		&i.Typehash,
	)
	return i, err
}

const getNodeByPath = `-- name: GetNodeByPath :one
SELECT id, title, path, depth, numchild, typeHash
FROM PageNode
WHERE path = ?1
`

func (q *Queries) GetNodeByPath(ctx context.Context, path sql.NullString) (models.PageNode, error) {
	row := q.db.QueryRowContext(ctx, getNodeByPath, path)
	var i models.PageNode
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Path,
		&i.Depth,
		&i.Numchild,
		&i.Typehash,
	)
	return i, err
}

const insertNode = `-- name: InsertNode :execlastid
INSERT INTO PageNode (title, path, depth, numchild, typeHash)
VALUES (?1, ?2, ?3, ?4, ?5)
`

func (q *Queries) InsertNode(ctx context.Context, title sql.NullString, path sql.NullString, depth sql.NullInt64, numchild sql.NullInt64, typehash sql.NullString) (int64, error) {
	result, err := q.db.ExecContext(ctx, insertNode,
		title,
		path,
		depth,
		numchild,
		typehash,
	)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const updateNode = `-- name: UpdateNode :exec
UPDATE PageNode
SET title = ?1, path = ?2, depth = ?3, numchild = ?4, typeHash = ?5
WHERE id = ?6
`

func (q *Queries) UpdateNode(ctx context.Context, title sql.NullString, path sql.NullString, depth sql.NullInt64, numchild sql.NullInt64, typehash sql.NullString, iD sql.NullInt64) error {
	_, err := q.db.ExecContext(ctx, updateNode,
		title,
		path,
		depth,
		numchild,
		typehash,
		iD,
	)
	return err
}

const updateNodePathAndDepth = `-- name: UpdateNodePathAndDepth :exec
UPDATE PageNode
SET path = ?1, depth = ?2
WHERE id = ?3
`

func (q *Queries) UpdateNodePathAndDepth(ctx context.Context, path sql.NullString, depth sql.NullInt64, iD sql.NullInt64) error {
	_, err := q.db.ExecContext(ctx, updateNodePathAndDepth, path, depth, iD)
	return err
}
