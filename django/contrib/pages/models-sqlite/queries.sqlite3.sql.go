// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: queries.sqlite3.sql

package models_sqlite

import (
	"context"
	"strings"

	"github.com/Nigel2392/django/contrib/pages/models"
)

const deleteNode = `-- name: DeleteNode :exec
DELETE FROM PageNode
WHERE id = ?1
`

func (q *Queries) DeleteNode(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteNode, id)
	return err
}

const getChildren = `-- name: GetChildren :many
SELECT id, title, path, depth, numchild, status_flags, page_id, typeHash
FROM PageNode
WHERE path LIKE CONCAT(?1, '%') AND depth = ?2 + 1
`

func (q *Queries) GetChildren(ctx context.Context, path interface{}, depth interface{}) ([]models.PageNode, error) {
	rows, err := q.db.QueryContext(ctx, getChildren, path, depth)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []models.PageNode
	for rows.Next() {
		var i models.PageNode
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Path,
			&i.Depth,
			&i.Numchild,
			&i.StatusFlags,
			&i.PageID,
			&i.Typehash,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDescendants = `-- name: GetDescendants :many
SELECT id, title, path, depth, numchild, status_flags, page_id, typeHash
FROM PageNode
WHERE path LIKE CONCAT(?1, '%') AND depth > ?2
`

func (q *Queries) GetDescendants(ctx context.Context, path interface{}, depth int64) ([]models.PageNode, error) {
	rows, err := q.db.QueryContext(ctx, getDescendants, path, depth)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []models.PageNode
	for rows.Next() {
		var i models.PageNode
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Path,
			&i.Depth,
			&i.Numchild,
			&i.StatusFlags,
			&i.PageID,
			&i.Typehash,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getForPaths = `-- name: GetForPaths :many
SELECT id, title, path, depth, numchild, status_flags, page_id, typeHash
FROM PageNode
WHERE path IN (/*SLICE:path*/?)
`

func (q *Queries) GetForPaths(ctx context.Context, path []string) ([]models.PageNode, error) {
	query := getForPaths
	var queryParams []interface{}
	if len(path) > 0 {
		for _, v := range path {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:path*/?", strings.Repeat(",?", len(path))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:path*/?", "NULL", 1)
	}
	rows, err := q.db.QueryContext(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []models.PageNode
	for rows.Next() {
		var i models.PageNode
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Path,
			&i.Depth,
			&i.Numchild,
			&i.StatusFlags,
			&i.PageID,
			&i.Typehash,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNodeByID = `-- name: GetNodeByID :one
SELECT id, title, path, depth, numchild, status_flags, page_id, typeHash
FROM PageNode
WHERE id = ?1
`

func (q *Queries) GetNodeByID(ctx context.Context, id int64) (models.PageNode, error) {
	row := q.db.QueryRowContext(ctx, getNodeByID, id)
	var i models.PageNode
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Path,
		&i.Depth,
		&i.Numchild,
		&i.StatusFlags,
		&i.PageID,
		&i.Typehash,
	)
	return i, err
}

const getNodeByPath = `-- name: GetNodeByPath :one
SELECT id, title, path, depth, numchild, status_flags, page_id, typeHash
FROM PageNode
WHERE path = ?1
`

func (q *Queries) GetNodeByPath(ctx context.Context, path string) (models.PageNode, error) {
	row := q.db.QueryRowContext(ctx, getNodeByPath, path)
	var i models.PageNode
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Path,
		&i.Depth,
		&i.Numchild,
		&i.StatusFlags,
		&i.PageID,
		&i.Typehash,
	)
	return i, err
}

const insertNode = `-- name: InsertNode :execlastid
INSERT INTO PageNode (title, path, depth, numchild, status_flags, page_id, typeHash)
VALUES (?1, ?2, ?3, ?4, ?5, ?6, ?7)
`

func (q *Queries) InsertNode(ctx context.Context, title string, path string, depth int64, numchild int64, statusFlags int64, pageID int64, typehash string) (int64, error) {
	result, err := q.db.ExecContext(ctx, insertNode,
		title,
		path,
		depth,
		numchild,
		statusFlags,
		pageID,
		typehash,
	)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const updateNode = `-- name: UpdateNode :exec
UPDATE PageNode
SET title = ?1,
    path = ?2,
    depth = ?3, 
    numchild = ?4, 
    status_flags = ?5, 
    page_id = ?6, 
    typeHash = ?7
WHERE id = ?8
`

func (q *Queries) UpdateNode(ctx context.Context, title string, path string, depth int64, numchild int64, statusFlags int64, pageID int64, typehash string, iD int64) error {
	_, err := q.db.ExecContext(ctx, updateNode,
		title,
		path,
		depth,
		numchild,
		statusFlags,
		pageID,
		typehash,
		iD,
	)
	return err
}

const updateNodePathAndDepth = `-- name: UpdateNodePathAndDepth :exec
UPDATE PageNode
SET path = ?1, depth = ?2
WHERE id = ?3
`

func (q *Queries) UpdateNodePathAndDepth(ctx context.Context, path string, depth int64, iD int64) error {
	_, err := q.db.ExecContext(ctx, updateNodePathAndDepth, path, depth, iD)
	return err
}

const updateNodeStatusFlags = `-- name: UpdateNodeStatusFlags :exec
UPDATE PageNode
SET status_flags = ?1
WHERE id = ?2
`

func (q *Queries) UpdateNodeStatusFlags(ctx context.Context, statusFlags int64, iD int64) error {
	_, err := q.db.ExecContext(ctx, updateNodeStatusFlags, statusFlags, iD)
	return err
}
