package components

import (
    "fmt"
)

type ButtonType uint8

const (
    ButtonTypePrimary ButtonType = 1 << iota
    ButtonTypeSecondary
    ButtonTypeSuccess
    ButtonTypeWarning
    ButtonTypeDanger
    ButtonTypeHollow
)

type ButtonConfig struct {
    Text string
    Icon templ.Component
    Type ButtonType
}

func NewButton(text string, args ...interface{}) templ.Component {

	var (
		iconComponent templ.Component
		type_ 	   ButtonType = 0
	)
loop:
	for _, arg := range args {
		switch t := arg.(type) {
        case templ.Component:
			iconComponent = t
		case string:
            if t == "" {
			    continue loop
            }
			iconComponent = templ.Raw(t)
		case ButtonType:
			type_ |= t
		case int:
			type_ |= ButtonType(t)
		case uint:
			type_ |= ButtonType(t)
        case nil, any:
            continue loop
		default:
			fmt.Printf("Unknown type: %T\n", t)
		}
	}

	var cfg = ButtonConfig{
		Text: text,
		Icon: iconComponent,
		Type: type_,
	}


	return Button(cfg)
}


func ButtonPrimary(text string, icon any, hollow ...bool) templ.Component {
	var h = false
	if len(hollow) > 0 && hollow[0] {
		h = true
	}
	var typ = ButtonTypePrimary
	if h {
		typ |= ButtonTypeHollow
	}
	return NewButton(text, icon, typ)
}

func ButtonSecondary(text string, icon any, hollow ...bool) templ.Component {
	var h = false
	if len(hollow) > 0 && hollow[0] {
		h = true
	}
	var typ = ButtonTypeSecondary
	if h {
		typ |= ButtonTypeHollow
	}
	return NewButton(text, icon, typ)
}

func ButtonSuccess(text string, icon any, hollow ...bool) templ.Component {
	var h = false
	if len(hollow) > 0 && hollow[0] {
		h = true
	}
	var typ = ButtonTypeSuccess
	if h {
		typ |= ButtonTypeHollow
	}
	return NewButton(text, icon, typ)
}

func ButtonDanger(text string, icon any, hollow ...bool) templ.Component {
	var h = false
	if len(hollow) > 0 && hollow[0] {
		h = true
	}
	var typ = ButtonTypeDanger
	if h {
		typ |= ButtonTypeHollow
	}
	return NewButton(text, icon, typ)
}

func ButtonWarning(text string, icon any, hollow ...bool) templ.Component {
	var h = false
	if len(hollow) > 0 && hollow[0] {
		h = true
	}
	var typ = ButtonTypeWarning
	if h {
		typ |= ButtonTypeHollow
	}
	return NewButton(text, icon, typ)
}


templ Button(config ButtonConfig) {
    <button class={ 
        "button",
        templ.KV("primary", config.Type & ButtonTypePrimary != 0),
        templ.KV("secondary", config.Type & ButtonTypeSecondary != 0),
        templ.KV("success", config.Type & ButtonTypeSuccess != 0),
        templ.KV("danger", config.Type & ButtonTypeDanger != 0),
        templ.KV("warning", config.Type & ButtonTypeWarning != 0),
        templ.KV("hollow", config.Type & ButtonTypeHollow != 0),
    }>
        if config.Icon != nil {
            @config.Icon
        }
        { config.Text }
    </button>
}