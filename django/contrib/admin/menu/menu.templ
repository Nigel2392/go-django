package menu

import "strings"

type MenuItem interface {
	// Order is used to sort the menu items
	//
	// The menu items are sorted in ascending order
	//
	// I.E. The menu item with the lowest order will be displayed first
	//
	// If two menu items have the same order, they will remain in the order they were added
	Order() int

	// Implement a method for the templ.Component interface
	// 
	// We explicitly only render the menu with the templ generated code.
	Component() templ.Component
}

type Menu struct {
	ID string
	Classes []string
	Items []MenuItem
}

func (m *Menu) HTML() string {
	var ctx = context.Background()
	var buf = new(bytes.Buffer)
	m.Component().Render(ctx, buf)
	return buf.String()
}

templ (m *Menu) Component() {
	<div class={ strings.Join(append(m.Classes, "menu"), " ") } if m.ID != "" { id={ m.ID } }>
		for _, item := range m.Items {
			<div class="menu-item">
				@item.Component()
			</div>
		}
	</div>
}

type Item struct {
	ID string
	Classes []string
	Ordering int
	Label func() string
	Link func() string
}

func (i *Item) Order() int {
	return i.Ordering
}

templ (i *Item) Component() {
	<a class={ strings.Join(append(i.Classes, "menu-item-link"), " ") } if i.ID != "" { id={ i.ID } } href={ templ.SafeURL(i.Link()) }>
		{i.Label()}
	</a>
}

type SubmenuItem struct {
	ID string
	Classes []string
	Ordering int
	Label func() string
	Menu *Menu
}

func (s *SubmenuItem) Order() int {
	return s.Ordering
}

templ (s *SubmenuItem) Component() {
	<div class={ strings.Join(append(s.Classes, "menu-item"), " ") } if s.ID != "" { id={ s.ID } }>
		<div class="menu-item-label">
			{s.Label()}
		</div>
		<div class="menu-item-menu">
			@s.Menu.Component()
		</div>
	</div>
}
