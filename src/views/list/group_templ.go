// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.833
package list

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import (
	"github.com/Nigel2392/go-django/src/core/attrs"
	"github.com/Nigel2392/go-django/src/core/except"
	"github.com/Nigel2392/go-django/src/forms"
	"github.com/Nigel2392/go-django/src/forms/modelforms"
	"maps"
	"net/http"
)

type ListColumnGroup[T attrs.Definer] struct {
	Definitions attrs.Definitions
	Columns     []ListColumn[T]
	Instance    T
	Attrs       func(r *http.Request, definitions attrs.Definitions, instance T) map[string]any
}

func NewColumnGroup[T attrs.Definer](r *http.Request, instance T, columns []ListColumn[T]) *ListColumnGroup[T] {
	return &ListColumnGroup[T]{
		Definitions: instance.FieldDefs(),
		Columns:     columns,
		Instance:    instance,
	}
}

func (c *ListColumnGroup[T]) Row() T {
	return c.Instance
}

func (c *ListColumnGroup[T]) AddColumn(column ListColumn[T]) {
	c.Columns = append(c.Columns, column)
}

func (c *ListColumnGroup[T]) Form(r *http.Request, opts ...func(forms.Form)) forms.Form {
	var columns = make([]ListEditableColumn[T], 0)
	for _, column := range c.Columns {
		if def, ok := column.(ListEditableColumn[T]); ok {
			columns = append(columns, def)
		}
	}

	if len(columns) == 0 {
		return nil
	}

	var form = modelforms.NewBaseModelForm(r.Context(), c.Instance, opts...)
	var fieldsAdded bool
	for _, column := range columns {
		var (
			fieldName = column.FieldName()
			field     = column.FormField(r, c.Instance)
		)

		if fieldName == "" || field == nil {
			continue
		}

		form.AddField(fieldName, field)
		fieldsAdded = true
	}

	if !fieldsAdded {
		return nil
	}

	return form
}

func (c *ListColumnGroup[T]) GetAttrs(r *http.Request, definitions attrs.Definitions, instance T) map[string]any {
	var attrs map[string]any
	if c.Attrs != nil {
		attrs = c.Attrs(r, definitions, instance)
	}
	if attrs == nil {
		attrs = make(map[string]any)
	}
	return attrs
}

func (c *ListColumnGroup[T]) RenderColumns(r *http.Request, form *ListForm[T]) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		var colCount = len(c.Columns)
		for colIndex, column := range c.Columns {
			var attrs = c.GetAttrs(r, c.Definitions, c.Instance)
			maps.Copy(attrs, column.Attributes(r, c.Definitions, c.Instance, colIndex, colCount))
			if form == nil || !AllowListEdit(ctx) {
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, " <td class=\"list-column\"")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templ.RenderAttributes(ctx, templ_7745c5c3_Buffer, attrs)
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, ">")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = column.Component(r, c.Definitions, c.Instance).Render(ctx, templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "</td>")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				continue
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 4, " <td class=\"list-column\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templ.RenderAttributes(ctx, templ_7745c5c3_Buffer, attrs)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 5, ">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			switch col := column.(type) {
			case ListEditableColumn[T]:
				var fieldName = col.FieldName()
				if fieldName == "" || col.FormField(r, c.Instance) == nil {
					templ_7745c5c3_Err = col.Component(r, c.Definitions, c.Instance).Render(ctx, templ_7745c5c3_Buffer)
					if templ_7745c5c3_Err != nil {
						return templ_7745c5c3_Err
					}
					templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 6, " ")
					if templ_7745c5c3_Err != nil {
						return templ_7745c5c3_Err
					}
					continue
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 7, " ")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var rowForm = form.ForInstance(c.Instance)
				var boundFields = rowForm.BoundFields()
				var field, ok = boundFields.Get(fieldName)
				if !ok {
					return except.Fail(http.StatusInternalServerError, "could not find field %q in bound fields", col.FieldName())
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 8, " ")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				templ_7745c5c3_Err = col.EditableComponent(r, c.Definitions, c.Instance, rowForm, field.(*forms.BoundFormField)).Render(ctx, templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			default:
				templ_7745c5c3_Err = col.Component(r, c.Definitions, c.Instance).Render(ctx, templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 9, "</td>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		return nil
	})
}

func (c *ListColumnGroup[T]) Component(r *http.Request, form *ListForm[T]) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var2 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var2 == nil {
			templ_7745c5c3_Var2 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 10, "<tr class=\"column-group\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = c.RenderColumns(r, form).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 11, "</tr>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
