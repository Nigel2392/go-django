package list

import (
	"context"
	"github.com/Nigel2392/go-django/src/core/attrs"
	"strings"
	"net/http"
)

type List[T attrs.Definer] struct {
	Columns []ListColumn[T]
	HideHeadings bool
	groups  []ColumnGroup[T]
	request *http.Request
}

func NewList[T attrs.Definer](r *http.Request,list []T, columns ...ListColumn[T]) *List[T] {
	var l = &List[T]{
		Columns: columns,
		groups:  make([]ColumnGroup[T], 0, len(list)),
		request: r,
	}

	for _, item := range list {
		var group = ColumnGroup[T]{
			Definitons: item.FieldDefs(),
			Columns:    columns,
			Instance:   item,
		}

		l.groups = append(l.groups, group)
	}

	return l
}

func (l *List[T]) Render() string {
	var component = l.Component()
	var b strings.Builder
	var ctx = context.Background()
	component.Render(ctx, &b)
	return b.String()
}

templ (l *List[T]) Component() {
	<table class="list">
		if !l.HideHeadings {
			<thead>
				<tr class="list-header">
					for _, column := range l.Columns {
						<th class="list-column-header">
							@column.Header()
						</th>
					}
				</tr>
			</thead>
		}
		<tbody>
			for _, group := range l.groups {
				@group.Component(l.request)
			}
		</tbody>
	</table>
}
