package list

import (
    "github.com/Nigel2392/go-django/src/core/attrs"
    "github.com/Nigel2392/go-django/src/core/assert"
    "github.com/Nigel2392/go-django/src/forms/fields"
	"html/template"
)

type funcColumn[T attrs.Definer] struct {
	header func() string
	data   func(defs attrs.Definitions, row T) interface{}
}

templ (c *funcColumn[T]) Header() {
	{{ assert.False(c.header == nil, "Column header is nil") }}
    { c.header() }
}

templ (c *funcColumn[T]) Component(defs attrs.Definitions, row T) {
    { attrs.ToString(
        c.data(defs, row),
    ) }
}

func FuncColumn[T attrs.Definer](header func() string, data func(defs attrs.Definitions, row T) interface{}) ListColumn[T] {
	return &funcColumn[T]{header, data}
}

type fieldColumn[T attrs.Definer] struct {
	header    func() string
	fieldName string
}

templ (c *fieldColumn[T]) Header() {
	{{ assert.False(c.header == nil, "Column header is nil") }}
    { c.header() }
}

func (c *fieldColumn[T]) data(defs attrs.Definitions, _ T) interface{} {
	var field, ok = defs.Field(c.fieldName)

	assert.False(
		!ok,
		"Field %q does not exist", c.fieldName,
	)

	if field == nil {
		return nil
	}

	var d = field.GetValue()
	if fields.IsZero(d) {
		return field.GetDefault()
	}

	return d
}

templ (c *fieldColumn[T]) Component(defs attrs.Definitions, row T) {
    { attrs.ToString(
        c.data(defs, row),
    ) }
}

func FieldColumn[T attrs.Definer](header func() string, fieldName string) ListColumn[T] {
	return &fieldColumn[T]{header, fieldName}
}

type titleFieldColumn[T attrs.Definer] struct {
	wrapped ListColumn[T]
	getURL  func(defs attrs.Definitions, row T) string
}

templ (c *titleFieldColumn[T]) Header() {
	<div class="list-title">
		@c.wrapped.Header()
	</div>
}

templ (c *titleFieldColumn[T]) Component(defs attrs.Definitions, row T) {
	{{ var url = templ.SafeURL(c.getURL(defs, row))}}
	<div class="list-title">
		if url == "" {
			@c.wrapped.Component(defs, row)
		} else {
			<a href={ url }>
				@c.wrapped.Component(defs, row)
			</a>
		}
	</div>
}

func TitleFieldColumn[T attrs.Definer](wraps ListColumn[T], getURL func(defs attrs.Definitions, row T) string) ListColumn[T] {
	return &titleFieldColumn[T]{
		wrapped: wraps,
		getURL:  getURL,
	}
}

type htmlColumn[T attrs.Definer] struct {
	fieldColumn[T]
	getHTML func(defs attrs.Definitions, row T) template.HTML
}

templ (c *htmlColumn[T]) Component(defs attrs.Definitions, row T) {
	{{ var html = c.getHTML(defs, row) }}
	@templ.Raw(html)
}

func HTMLColumn[T attrs.Definer](header func() string, getHTML func(defs attrs.Definitions, row T) template.HTML) ListColumn[T] {
	return &htmlColumn[T]{
		fieldColumn: fieldColumn[T]{header: header},
		getHTML:    getHTML,
	}
}

type linkColumn[T attrs.Definer] struct {
	fieldColumn[T]
	getURL func(defs attrs.Definitions, row T) string
}

templ (c *linkColumn[T]) Component(defs attrs.Definitions, row T) {
	{{ var url = templ.SafeURL(c.getURL(defs, row))}}
	if url == "" {
		@c.fieldColumn.Component(defs, row)
	} else {
		<a href={ url }>
			@c.fieldColumn.Component(defs, row)
		</a>
	}
}

func LinkColumn[T attrs.Definer](header func() string, fieldName string, getURL func(defs attrs.Definitions, row T) string) ListColumn[T] {
	return &linkColumn[T]{
		fieldColumn: fieldColumn[T]{header, fieldName},
		getURL:     getURL,
	}
}

func Column[T attrs.Definer](header func() string, getter any) ListColumn[T] {
	switch g := getter.(type) {
	case func(defs attrs.Definitions, row T) interface{}:
		return &funcColumn[T]{header, g}
	case string:
		return &fieldColumn[T]{header, g}
	default:
		assert.Fail("Invalid column getter type")
		return nil
	}
}
