package pagination

import (
	"context"
	"fmt"
	"github.com/Nigel2392/go-django/src/core/trans"
	"html/template"
	"net/url"
	"strconv"
	"strings"
)

type pageObject[T any] struct {
	num       int
	results   []T
	paginator Pagination[T]
	context   context.Context
}

func (p *pageObject[T]) FirstPage() int {
	return 1
}

func (p *pageObject[T]) LastPage() int {
	var numpages, err = p.Paginator().NumPages()
	if err != nil {
		return 1
	}
	return numpages
}

func (p *pageObject[T]) HTML(queryParam string, numPageNumbers int, queryParams url.Values) template.HTML {
	var b = new(strings.Builder)
	var cmp = p.Component(queryParam, numPageNumbers, queryParams)
	if err := cmp.Render(p.context, b); err != nil {
		panic(fmt.Errorf("failed to render paginator component: %w", err))
	}
	return template.HTML(b.String())
}

templ (p *pageObject[T]) Component(queryParam string, numPageNumbers int, queryParams url.Values) {
	{{ var count, err = p.Paginator().NumPages() }}
	if err != nil {
		{{ count = 1 }}
	}
	if count == 1 {
		{{ return nil }}
	}
	{{ var q string }}
	if queryParams.Has(queryParam) {
		{{ queryParams.Del(queryParam) }}
	}
	if len(queryParams) > 0 {
		{{ q = fmt.Sprintf("&%s", queryParams.Encode()) }}
	}
	<div class="pagination">
		<section class="pagination--paginator">
			<div class="prev">
				if p.HasPrev() {
					<a href={ templ.SafeURL(fmt.Sprintf("?%s=%d%s", queryParam, p.FirstPage(), q)) }>{ trans.T(ctx, "<<") }</a>
					<a href={ templ.SafeURL(fmt.Sprintf("?%s=%d%s", queryParam, p.Prev(), q)) }>{ trans.T(ctx, "Previous") }</a>
				}
			</div>
			{{ var start = p.PageNum() - numPageNumbers }}
			if start < 1 {
				{{ start = 1 }}
			}
			{{ var end = p.PageNum() + numPageNumbers }}
			if end > count {
				{{ end = count }}
			}
			<div class="page-numbers">
				for i := start; i <= end; i++ {
					if i == p.PageNum() {
						<div class="page-number active">
							<a href={ templ.SafeURL(fmt.Sprintf("?%s=%d%s", queryParam, i, q)) } disabled>{ strconv.Itoa(i) }</a>
						</div>
					} else {
						<div class="page-number">
							<a href={ templ.SafeURL(fmt.Sprintf("?%s=%d%s", queryParam, i, q)) }>{ strconv.Itoa(i) }</a>
						</div>
					}
				}
			</div>
			<div class="next">
				if p.HasNext() {
					<a href={ templ.SafeURL(fmt.Sprintf("?%s=%d%s", queryParam, p.Next(), q)) }>{ trans.T(ctx, "Next") }</a>
					{{ lastPage := p.LastPage() }}
					if lastPage > 1 {
						<a href={ templ.SafeURL(fmt.Sprintf("?%s=%d%s", queryParam, p.LastPage(), q)) }>{ trans.T(ctx, ">>") }</a>
					}
				}
			</div>
		</section>
	</div>
}

func (p *pageObject[T]) Count() int {
	return len(p.results)
}

func (p *pageObject[T]) Results() []T {
	return p.results
}

func (p *pageObject[T]) Paginator() Pagination[T] {
	return p.paginator
}

func (p *pageObject[T]) HasNext() bool {
	var numpages, err = p.Paginator().NumPages()
	if err != nil {
		return false
	}
	return p.PageNum() < numpages
}

func (p *pageObject[T]) HasPrev() bool {
	return p.num > 0
}

func (p *pageObject[T]) Next() int {
	if p.HasNext() {
		return p.PageNum() + 1
	}
	return -1
}

func (p *pageObject[T]) Prev() int {
	if p.HasPrev() {
		return p.PageNum() - 1
	}
	return -1
}

func (p *pageObject[T]) PageNum() int {
	return p.num + 1
}
