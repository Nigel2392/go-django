package pagination

import "github.com/Nigel2392/go-django/src/core/trans"
import "strconv"
import "net/url"
import "fmt"
import "html/template"
import "strings"

type pageObject[T any] struct {
	num       int
	results   []T
	paginator Pagination[T]
}

func (p *pageObject[T]) HTML(queryParam string, numPageNumbers int, queryParams url.Values) template.HTML {
    var b = new(strings.Builder)
    var cmp = p.Component(queryParam, numPageNumbers, queryParams)
    var ctx = context.Background()
    cmp.Render(ctx, b)
    return template.HTML(b.String())
}

templ (p *pageObject[T]) Component(queryParam string, numPageNumbers int, queryParams url.Values) {
    {{ var count, err = p.Paginator().NumPages() }}
    if err != nil {
        {{ count = 1 }}
    }

    if count == 1 {
        {{ return nil }}
    }

    {{ var q string }}
    if queryParams.Has(queryParam) {
        {{ queryParams.Del(queryParam) }}
    }
    if len(queryParams) > 0 {
        {{ q = fmt.Sprintf("&%s", queryParams.Encode()) }}
    }

    <div class="pagination">
        <section class="pagination--paginator">
            <div class="prev">
                if p.HasPrev() {
                    <a href={ templ.SafeURL(fmt.Sprintf("?%s=%d%s", queryParam, p.Prev(), q)) }>{ trans.T("Previous") }</a>
                }
            </div>

            {{ var start = p.PageNum() - numPageNumbers }}
            if start < 1 {
                {{ start = 1 }}
            }

            {{ var end = p.PageNum() + numPageNumbers }}
            if end > count {
                {{ end = count }}
            }

            <div class="page-numbers">
                for i := start; i <= end; i++ {
                    if i == p.PageNum() {
                        <div class="page-number active">
                            <a href={ templ.SafeURL(fmt.Sprintf("?%s=%d%s", queryParam, i, q)) } disabled>{ strconv.Itoa(i) }</a>
                        </div>
                    } else {
                        <div class="page-number">
                            <a href={ templ.SafeURL(fmt.Sprintf("?%s=%d%s", queryParam, i, q)) }>{ strconv.Itoa(i) }</a>
                        </div>
                    }
                }
            </div>

            <div class="next">
                if p.HasNext() {
                    <a href={ templ.SafeURL(fmt.Sprintf("?%s=%d%s", queryParam, p.Next(), q)) }>{ trans.T("Next") }</a>
                }
            </div>
        </section>
    </div>
}

func (p *pageObject[T]) Count() int {
	return len(p.results)
}

func (p *pageObject[T]) Results() []T {
	return p.results
}

func (p *pageObject[T]) Paginator() Pagination[T] {
	return p.paginator
}

func (p *pageObject[T]) HasNext() bool {
    var numpages, err = p.Paginator().NumPages()
    if err != nil {
        return false
    }
    return p.PageNum() < numpages
}

func (p *pageObject[T]) HasPrev() bool {
	return p.num > 0
}

func (p *pageObject[T]) Next() int {
	if p.HasNext() {
		return p.PageNum() + 1
	}
	return -1
}

func (p *pageObject[T]) Prev() int {
	if p.HasPrev() {
		return p.PageNum() - 1
	}
	return -1
}

func (p *pageObject[T]) PageNum() int {
	return p.num + 1
}
