package openauth2

import (
	"context"
	"encoding/json"
	"fmt"
	"time"

	"github.com/Nigel2392/go-django/src/core/attrs"
	"golang.org/x/oauth2"
)

type User struct {
	ID               uint64          `json:"id"`
	UniqueIdentifier string          `json:"unique_identifier"`
	ProviderName     string          `json:"provider_name"`
	Data             json.RawMessage `json:"data"`
	AccessToken      string          `json:"access_token"`
	RefreshToken     string          `json:"refresh_token"`
	TokenType        string          `json:"token_type"`
	ExpiresAt        time.Time       `json:"expires_at"`
	CreatedAt        time.Time       `json:"created_at"`
	UpdatedAt        time.Time       `json:"updated_at"`
	IsAdministrator  bool            `json:"is_administrator"`
	IsActive         bool            `json:"is_active"`

	IsLoggedIn bool `json:"is_logged_in"`
	context    context.Context
}

func (u *User) String() string {
	return fmt.Sprintf(
		"%s (%s)",
		u.UniqueIdentifier,
		u.ProviderName,
	)
}

func (u *User) IsAdmin() bool {
	return u.IsAdministrator
}

func (u *User) IsAuthenticated() bool {
	return u.IsLoggedIn
}

func (u *User) SetContext(ctx context.Context) *User {
	u.context = ctx
	return u
}

func (u *User) Context() context.Context {
	if u.context == nil {
		u.context = context.Background()
	}
	return u.context
}

func (u *User) SetToken(token *oauth2.Token) {
	u.AccessToken = token.AccessToken
	u.RefreshToken = token.RefreshToken
	u.ExpiresAt = token.Expiry
	u.TokenType = token.TokenType
}

func (u *User) Token() *oauth2.Token {
	var token = &oauth2.Token{
		AccessToken:  u.AccessToken,
		RefreshToken: u.RefreshToken,
		Expiry:       u.ExpiresAt,
		TokenType:    u.TokenType,
	}
	return token
}

func (o *User) FieldDefs() attrs.Definitions {
	var fields = make([]attrs.Field, 12)
	fields[0] = attrs.NewField(
		o, "ID", &attrs.FieldConfig{
			Null:     false,
			Blank:    false,
			ReadOnly: true,
			Label:    "ID",
			Primary:  true,
		},
	)
	fields[1] = attrs.NewField(
		o, "UniqueIdentifier", &attrs.FieldConfig{
			Null:     false,
			Blank:    false,
			ReadOnly: true,
			Label:    "Unique Identifier",
		},
	)
	fields[2] = attrs.NewField(
		o, "ProviderName", &attrs.FieldConfig{
			Null:     false,
			Blank:    false,
			ReadOnly: true,
			Label:    "Provider Name",
		},
	)
	fields[3] = attrs.NewField(
		o, "Data", &attrs.FieldConfig{
			Null:     true,
			Blank:    true,
			ReadOnly: true,
			Label:    "Data",
		},
	)
	fields[4] = attrs.NewField(
		o, "AccessToken", &attrs.FieldConfig{
			Null:     true,
			Blank:    true,
			ReadOnly: true,
			Label:    "Access Token",
		},
	)
	fields[5] = attrs.NewField(
		o, "RefreshToken", &attrs.FieldConfig{
			Null:     true,
			Blank:    true,
			ReadOnly: true,
			Label:    "Refresh Token",
		},
	)
	fields[6] = attrs.NewField(
		o, "TokenType", &attrs.FieldConfig{
			Null:     true,
			Blank:    true,
			ReadOnly: true,
			Label:    "Token Type",
		},
	)
	fields[7] = attrs.NewField(
		o, "ExpiresAt", &attrs.FieldConfig{
			Null:     true,
			Blank:    true,
			ReadOnly: true,
			Label:    "Expires At",
		},
	)
	fields[8] = attrs.NewField(
		o, "CreatedAt", &attrs.FieldConfig{
			Null:     true,
			Blank:    true,
			ReadOnly: true,
			Label:    "Created At",
		},
	)
	fields[9] = attrs.NewField(
		o, "UpdatedAt", &attrs.FieldConfig{
			Null:     true,
			Blank:    true,
			ReadOnly: true,
			Label:    "Updated At",
		},
	)
	fields[10] = attrs.NewField(
		o, "IsAdministrator", &attrs.FieldConfig{
			Null:  false,
			Blank: true,
			Label: "Is Administrator",
		},
	)
	fields[11] = attrs.NewField(
		o, "IsActive", &attrs.FieldConfig{
			Null:  false,
			Blank: true,
			Label: "Is Active",
		},
	)
	return attrs.Define(o, fields...)
}
