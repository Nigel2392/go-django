// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package openauth2_models_mysql

import (
	"context"
	"encoding/json"
	"strings"

	openauth2models "github.com/Nigel2392/go-django/src/contrib/openauth2/openauth2_models"
)

const createUser = `-- name: CreateUser :execlastid
INSERT INTO oauth2_users (unique_identifier, data, is_administrator, is_active)
VALUES (
    ?,
    ?,
    ?,
    ?
)
`

func (q *Queries) CreateUser(ctx context.Context, uniqueIdentifier string, data json.RawMessage, isAdministrator bool, isActive bool) (uint64, error) {
	result, err := q.exec(ctx, q.createUserStmt, createUser,
		uniqueIdentifier,
		data,
		isAdministrator,
		isActive,
	)
	if err != nil {
		return 0, err
	}
	id, err := result.LastInsertId()
	if err != nil {
		return 0, err
	}
	return uint64(id), nil
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM oauth2_users
WHERE id = ?
`

func (q *Queries) DeleteUser(ctx context.Context, id uint64) error {
	_, err := q.exec(ctx, q.deleteUserStmt, deleteUser, id)
	return err
}

const deleteUsers = `-- name: DeleteUsers :exec
DELETE FROM oauth2_users
WHERE id IN (/*SLICE:ids*/?)
`

func (q *Queries) DeleteUsers(ctx context.Context, ids []uint64) error {
	query := deleteUsers
	var queryParams []interface{}
	if len(ids) > 0 {
		for _, v := range ids {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:ids*/?", strings.Repeat(",?", len(ids))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:ids*/?", "NULL", 1)
	}
	_, err := q.exec(ctx, nil, query, queryParams...)
	return err
}

const retrieveUserByID = `-- name: RetrieveUserByID :one
SELECT id, unique_identifier, data, created_at, updated_at, is_administrator, is_active FROM oauth2_users
WHERE id = ?
`

func (q *Queries) RetrieveUserByID(ctx context.Context, id uint64) (*openauth2models.User, error) {
	row := q.queryRow(ctx, q.retrieveUserByIDStmt, retrieveUserByID, id)
	var i openauth2models.User
	err := row.Scan(
		&i.ID,
		&i.UniqueIdentifier,
		&i.Data,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsAdministrator,
		&i.IsActive,
	)
	return &i, err
}

const retrieveUserByIdentifier = `-- name: RetrieveUserByIdentifier :one
SELECT id, unique_identifier, data, created_at, updated_at, is_administrator, is_active FROM oauth2_users
WHERE unique_identifier = ?
`

func (q *Queries) RetrieveUserByIdentifier(ctx context.Context, uniqueIdentifier string) (*openauth2models.User, error) {
	row := q.queryRow(ctx, q.retrieveUserByIdentifierStmt, retrieveUserByIdentifier, uniqueIdentifier)
	var i openauth2models.User
	err := row.Scan(
		&i.ID,
		&i.UniqueIdentifier,
		&i.Data,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsAdministrator,
		&i.IsActive,
	)
	return &i, err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE oauth2_users
SET unique_identifier = ?,
    data = ?,
    is_administrator = ?,
    is_active = ?
WHERE id = ?
`

func (q *Queries) UpdateUser(ctx context.Context, uniqueIdentifier string, data json.RawMessage, isAdministrator bool, isActive bool, iD uint64) error {
	_, err := q.exec(ctx, q.updateUserStmt, updateUser,
		uniqueIdentifier,
		data,
		isAdministrator,
		isActive,
		iD,
	)
	return err
}
