// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package openauth2_models_mysql

import (
	"context"
	"database/sql"
	"fmt"

	openauth2models "github.com/Nigel2392/go-django/src/contrib/openauth2/openauth2_models"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createUserStmt, err = db.PrepareContext(ctx, createUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.createUserTokenStmt, err = db.PrepareContext(ctx, createUserToken); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUserToken: %w", err)
	}
	if q.deleteUserStmt, err = db.PrepareContext(ctx, deleteUser); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUser: %w", err)
	}
	if q.deleteUserTokenStmt, err = db.PrepareContext(ctx, deleteUserToken); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUserToken: %w", err)
	}
	if q.deleteUserTokenByProviderStmt, err = db.PrepareContext(ctx, deleteUserTokenByProvider); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUserTokenByProvider: %w", err)
	}
	if q.deleteUserTokensStmt, err = db.PrepareContext(ctx, deleteUserTokens); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUserTokens: %w", err)
	}
	if q.deleteUsersStmt, err = db.PrepareContext(ctx, deleteUsers); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUsers: %w", err)
	}
	if q.retrieveTokensByUserIDStmt, err = db.PrepareContext(ctx, retrieveTokensByUserID); err != nil {
		return nil, fmt.Errorf("error preparing query RetrieveTokensByUserID: %w", err)
	}
	if q.retrieveUserByIDStmt, err = db.PrepareContext(ctx, retrieveUserByID); err != nil {
		return nil, fmt.Errorf("error preparing query RetrieveUserByID: %w", err)
	}
	if q.retrieveUserByIdentifierStmt, err = db.PrepareContext(ctx, retrieveUserByIdentifier); err != nil {
		return nil, fmt.Errorf("error preparing query RetrieveUserByIdentifier: %w", err)
	}
	if q.updateUserStmt, err = db.PrepareContext(ctx, updateUser); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUser: %w", err)
	}
	if q.updateUserTokenStmt, err = db.PrepareContext(ctx, updateUserToken); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUserToken: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.createUserTokenStmt != nil {
		if cerr := q.createUserTokenStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserTokenStmt: %w", cerr)
		}
	}
	if q.deleteUserStmt != nil {
		if cerr := q.deleteUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUserStmt: %w", cerr)
		}
	}
	if q.deleteUserTokenStmt != nil {
		if cerr := q.deleteUserTokenStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUserTokenStmt: %w", cerr)
		}
	}
	if q.deleteUserTokenByProviderStmt != nil {
		if cerr := q.deleteUserTokenByProviderStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUserTokenByProviderStmt: %w", cerr)
		}
	}
	if q.deleteUserTokensStmt != nil {
		if cerr := q.deleteUserTokensStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUserTokensStmt: %w", cerr)
		}
	}
	if q.deleteUsersStmt != nil {
		if cerr := q.deleteUsersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUsersStmt: %w", cerr)
		}
	}
	if q.retrieveTokensByUserIDStmt != nil {
		if cerr := q.retrieveTokensByUserIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing retrieveTokensByUserIDStmt: %w", cerr)
		}
	}
	if q.retrieveUserByIDStmt != nil {
		if cerr := q.retrieveUserByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing retrieveUserByIDStmt: %w", cerr)
		}
	}
	if q.retrieveUserByIdentifierStmt != nil {
		if cerr := q.retrieveUserByIdentifierStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing retrieveUserByIdentifierStmt: %w", cerr)
		}
	}
	if q.updateUserStmt != nil {
		if cerr := q.updateUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserStmt: %w", cerr)
		}
	}
	if q.updateUserTokenStmt != nil {
		if cerr := q.updateUserTokenStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserTokenStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                            DBTX
	tx                            *sql.Tx
	createUserStmt                *sql.Stmt
	createUserTokenStmt           *sql.Stmt
	deleteUserStmt                *sql.Stmt
	deleteUserTokenStmt           *sql.Stmt
	deleteUserTokenByProviderStmt *sql.Stmt
	deleteUserTokensStmt          *sql.Stmt
	deleteUsersStmt               *sql.Stmt
	retrieveTokensByUserIDStmt    *sql.Stmt
	retrieveUserByIDStmt          *sql.Stmt
	retrieveUserByIdentifierStmt  *sql.Stmt
	updateUserStmt                *sql.Stmt
	updateUserTokenStmt           *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) openauth2models.Querier {
	return &Queries{
		db:                            tx,
		tx:                            tx,
		createUserStmt:                q.createUserStmt,
		createUserTokenStmt:           q.createUserTokenStmt,
		deleteUserStmt:                q.deleteUserStmt,
		deleteUserTokenStmt:           q.deleteUserTokenStmt,
		deleteUserTokenByProviderStmt: q.deleteUserTokenByProviderStmt,
		deleteUserTokensStmt:          q.deleteUserTokensStmt,
		deleteUsersStmt:               q.deleteUsersStmt,
		retrieveTokensByUserIDStmt:    q.retrieveTokensByUserIDStmt,
		retrieveUserByIDStmt:          q.retrieveUserByIDStmt,
		retrieveUserByIdentifierStmt:  q.retrieveUserByIdentifierStmt,
		updateUserStmt:                q.updateUserStmt,
		updateUserTokenStmt:           q.updateUserTokenStmt,
	}
}
