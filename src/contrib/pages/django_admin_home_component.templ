package pages

import "github.com/Nigel2392/go-django/src/contrib/admin"
import "html/template"
import "bytes"
import "net/http"
import "github.com/Nigel2392/go-django/src/views/list"
import "github.com/Nigel2392/go-django/src/core/attrs"
import "github.com/Nigel2392/go-django/src"
import "github.com/Nigel2392/go-django/src/core/trans"
import "github.com/Nigel2392/go-django/src/forms/media"
import "github.com/Nigel2392/go-django/src/contrib/admin/components/columns"

var (
    _ADMIN_HOMEPAGE_PAGE_COUNT int32 = 5
)

type PagesAdminHomeComponent struct {
	ListFields []string
    AdminApplication *admin.AdminApplication
    Request *http.Request
}

templ (p *PagesAdminHomeComponent) html(upper *list.List[attrs.Definer]) {
    <div class="pages-admin-homepage-component">
        <div class="pages-admin-homepage-component-title">
            <h2>{ trans.T(ctx, "Pages") }</h2>
        </div>
        <div class="list-wrapper">
			<div class="list-wrapper__content">
				@upper.Component()
			</div>
		</div>
    </div>
}

func (p *PagesAdminHomeComponent) Media() media.Media {
	return nil
}

func (p *PagesAdminHomeComponent) HTML() template.HTML {
	var qs = NewPageQuerySet().WithContext(
        p.Request.Context(),
	)
	var pages, err = qs.
		Offset(0).
		Limit(int(_ADMIN_HOMEPAGE_PAGE_COUNT)).
		OrderBy("-UpdatedAt", "-Numchild", "Path").
		AllNodes()
    if err != nil {
        return template.HTML("")
    }

	var app, ok = admin.AdminSite.Apps.Get(AdminPagesAppName)
	if !ok {
		return template.HTML("")
	}

	model, ok := app.Models.Get(AdminPagesModelPath)
	if !ok {
		return template.HTML("")
	}

	var cols = make([]list.ListColumn[attrs.Definer], len(p.ListFields)+1)
	for i, field := range p.ListFields {
		cols[i+1] = model.GetColumn(p.Request.Context(), model.ListView, field)
	}

	cols[0] = cols[1]
	cols[1] = &columns.ListActionsColumn[attrs.Definer]{
		Actions: getListActions(django.Reverse("admin")),
	}

	var pagesList = make([]attrs.Definer, len(pages))
	for i, page := range pages {
		pagesList[i] = page
	}

    var listComponent = list.NewList[attrs.Definer](
		p.Request,
		 &PageNode{},
        pagesList,
		cols...,
    )

	var b bytes.Buffer
	err = p.html(listComponent).Render(
		p.Request.Context(), &b,
	)
	if err != nil {
		return template.HTML("")
	}

	return template.HTML(b.String())
}

func (p *PagesAdminHomeComponent) Ordering() int {
    return 5
}
