package admin

import (
    "fmt"
    "bytes"
    "context"
	"net/http"
    "html/template"
    "github.com/Nigel2392/go-django/src/forms"
	"github.com/Nigel2392/go-django/src/core/filesystem/tpl"
	"strconv"
	"github.com/gosimple/slug"
	"encoding/json"
	"github.com/Nigel2392/go-django/src/core/attrs"
	"io"
	"github.com/Nigel2392/go-django/src/forms/modelforms"
	"html"
	"strings"
	"maps"
	"github.com/Nigel2392/go-django/src/core/assert"
	"github.com/Nigel2392/go-django/queries/src/drivers/errors"
	"github.com/Nigel2392/go-django/src/core/trans"
)


type PanelComponent struct {
    Classname      string
    PanelId        string
    Hidden         bool
    AllowPanelLink bool
    InputID        string
    Attrs          templ.Attributes
    Heading        templ.Component
    HelpText       templ.Component
    Body           templ.Component
    Errors         []error
}

func (p PanelComponent) Render(ctx context.Context, w io.Writer) error {
    return p.Component().Render(ctx, w)
}

func appendAttrs(attrs templ.Attributes, key string, value any) {
    var values []string
    switch v := value.(type) {
    case string:
        values = []string{v}
    case []string:
        values = v
    default:
        assert.Fail(errors.TypeMismatch.Wrapf(
            "expected attribute %s to be string or []string, got %T",
            key, value,
        ))
    }

    existing, ok := attrs[key]
    if !ok {
        attrs[key] = strings.Join(values, " ")
        return
    }

    switch e := existing.(type) {
    case string:
        attrs[key] = strings.Join(append(values, e), " ")
    case []string:
        attrs[key] = strings.Join(append(values, e...), " ")
    default:
        assert.Fail(errors.TypeMismatch.Wrapf(
            "expected attribute %s to be string or []string, got %T",
            key, existing,
        ))
    }
}

func (p PanelComponent) panelAttrs() templ.Attributes {
    var attrs = make(templ.Attributes)
    maps.Copy(attrs, p.Attrs)
    var cls = []string{"panel"}
    if p.Classname != "" {
        cls = append(cls, p.Classname)
    }
    appendAttrs(attrs, "class", cls)
    appendAttrs(attrs, "data-controller", "panel")
    if p.PanelId != "" {
        attrs["data-panel-panel-value"] = p.PanelId
    }
    if p.InputID != "" {
        attrs["data-panel-input-id"] = p.InputID
    }
    return attrs
}

templ (p PanelComponent) Component() {
    <div { p.panelAttrs()... }>
        if !p.Hidden && p.Heading != nil {
            <div class="panel__heading" data-panel-target="heading">

                <a class="panel__icon" data-panel-target="linkIcon" href={ templ.SafeURL(fmt.Sprintf("#%s", p.PanelId)) }>
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="link-logo" viewBox="0 0 16 16">
                      <path d="M4.715 6.542 3.343 7.914a3 3 0 1 0 4.243 4.243l1.828-1.829A3 3 0 0 0 8.586 5.5L8 6.086a1 1 0 0 0-.154.199 2 2 0 0 1 .861 3.337L6.88 11.45a2 2 0 1 1-2.83-2.83l.793-.792a4 4 0 0 1-.128-1.287z"/>
                      <path d="M6.586 4.672A3 3 0 0 0 7.414 9.5l.775-.776a2 2 0 0 1-.896-3.346L9.12 3.55a2 2 0 1 1 2.83 2.83l-.793.792c.112.42.155.855.128 1.287l1.372-1.372a3 3 0 1 0-4.243-4.243z"/>
                    </svg>
                </a>

                <div class="panel__title" data-action="click->panel#toggle" id={ p.PanelId }>
                    @p.Heading
                </div>

            </div>
        }

        if len(p.Errors) > 0 {
            <div class="panel__errors">
                <ul>
                    for _, err := range p.Errors {
                        <li class="panel__error">@templ.Raw(string(err.Error()))</li>
                    }
                </ul>
            </div>
        }

        if !p.Hidden && p.HelpText != nil {
            <div class="panel__help">
                @p.HelpText
            </div>
        }

        <div class="panel__body" data-panel-target="content">
            @p.Body
        </div>
    </div>
}

type WidgetPanelComponent struct {
    BoundField forms.BoundField
}

func (p WidgetPanelComponent) Render(ctx context.Context, w io.Writer) error {
    var panelComponent = PanelComponent{
        Attrs:     nil,
        Classname: "panel-default collapsible",
        AllowPanelLink: true,
        PanelId:   BuildPanelID("", nil, slug.Make(p.BoundField.Name())),
        Hidden:    p.BoundField.Hidden(),
        Errors:    p.BoundField.Errors(),
    }
    panelComponent.Heading = templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
        _, err = w.Write([]byte(p.BoundField.Label()))
        return err
    })
    var helpText = p.BoundField.HelpText()
    if panelComponent.HelpText == nil && helpText != "" {
        panelComponent.HelpText = templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
            _, err = w.Write([]byte(helpText))
            return err
        })
    }
    panelComponent.Body = templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
        _, err = w.Write([]byte(`<div class="form-field-wrapper"><div class="form-field">`))
        if err != nil {
            return err
        }
        _, err = w.Write([]byte(p.BoundField.Field()))
        if err != nil {
            return err
        }
        _, err = w.Write([]byte(`</div></div>`))
        return err
    })
    return panelComponent.Render(ctx, w)
}

type BoundFormPanel[T forms.Form, P Panel] struct {
	forms.BoundField
    Context context.Context
    Request *http.Request
    Panel P
	Form T
}

func (p *BoundFormPanel[T, P]) Render() template.HTML {
    var b bytes.Buffer
    p.Component().Render(p.Context, &b)
    return template.HTML(b.String())
}

templ (p *BoundFormPanel[T, P]) Component() {
    @WidgetPanelComponent{ BoundField: p.BoundField }
}

type BoundTitlePanel[T forms.Form, P Panel] struct {
	BoundPanel
	Panel   P
    OutputIds []string
    Context context.Context
    Request *http.Request
}

func (p *BoundTitlePanel[T, P]) Render() template.HTML {
    var b bytes.Buffer
    p.Component().Render(p.Context, &b)
    return template.HTML(b.String())
}

func (p *BoundTitlePanel[T, P]) encodeOutputIDs() string {
    if len(p.OutputIds) == 0 {
        return "[]"
    }
    var b, _ = json.Marshal(p.OutputIds)
    return string(b)
}

templ (p *BoundTitlePanel[T, P]) Component() {
    if p.Hidden() {
        @p.BoundPanel.Component()
        {{ return nil }}
    }

    <div class={ "panel", "panel-title", p.Panel.ClassName() } data-controller="titlepanel" data-titlepanel-outputids-value={ p.encodeOutputIDs() }>
        <div class="panel__body">
            @p.BoundPanel.Component()
        </div>
    </div>
}

type BoundRowPanel[T forms.Form] struct {
    LabelFn func(context.Context) string
    HelpTextFn func(context.Context) string
    Panel   *rowPanel
    PanelIndex map[string]int
    Context context.Context
    Request *http.Request
    Panels  []BoundPanel
    Form    T
}

func (p *BoundRowPanel[T]) Hidden() bool {
    return false // RowPanel is never hidden
}

func (p *BoundRowPanel[T]) Render() template.HTML {
    var b bytes.Buffer
    p.Component().Render(p.Context, &b)
    return template.HTML(b.String())
}

templ (p *BoundRowPanel[T]) Component() {
    // if there is no label, there is nothing to link to, there wont be an icon.
    // only create the panel ID if there is a label to ensure we don't increment the counter
    {{ var panelId string }}
    if p.LabelFn != nil {
        {{ panelId = BuildPanelID("panel-row", p.PanelIndex, "row") }}
    }

    <div class={ "panel", "panel-row", "collapsible", p.Panel.ClassName() } data-controller="panel" data-panel-panel-value={ panelId }>
        if p.LabelFn != nil {
            <div class="panel__heading" data-panel-target="heading">

                <a class="panel__icon" data-panel-target="linkIcon" href={ templ.SafeURL(fmt.Sprintf("#%s", panelId)) }>
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="link-logo" viewBox="0 0 16 16">
                      <path d="M4.715 6.542 3.343 7.914a3 3 0 1 0 4.243 4.243l1.828-1.829A3 3 0 0 0 8.586 5.5L8 6.086a1 1 0 0 0-.154.199 2 2 0 0 1 .861 3.337L6.88 11.45a2 2 0 1 1-2.83-2.83l.793-.792a4 4 0 0 1-.128-1.287z"/>
                      <path d="M6.586 4.672A3 3 0 0 0 7.414 9.5l.775-.776a2 2 0 0 1-.896-3.346L9.12 3.55a2 2 0 1 1 2.83 2.83l-.793.792c.112.42.155.855.128 1.287l1.372-1.372a3 3 0 1 0-4.243-4.243z"/>
                    </svg>
                </a>

                {{ var label = p.LabelFn(ctx) }}
                <div class="panel__title" data-action="click->panel#toggle" id={ panelId }>
                    <label>@templ.Raw(label)</label>
                </div>

            </div>
        }

        if p.HelpTextFn != nil {
            <div class="panel__help">
                @templ.Raw(string(p.HelpTextFn(ctx)))
            </div>
        }

        <div class="panel__body" data-panel-target="content">
            for _, panel := range p.Panels {
                @panel.Component()
            }
        </div>
    </div>
}

type BoundPanelGroup[T forms.Form] struct {
    BoundPanel
    Panel   *panelGroup
    PanelIndex map[string]int
    LabelFn func(context.Context) string
    HelpTextFn func(context.Context) string
    Context context.Context
    Request *http.Request
    Panels  []BoundPanel
    Form    T
}

func (p *BoundPanelGroup[T]) Render() template.HTML {
    var b bytes.Buffer
    p.Component().Render(p.Context, &b)
    return template.HTML(b.String())
}

templ (p *BoundPanelGroup[T]) Component() {
    // if there is no label, there is nothing to link to, there wont be an icon.
    // only create the panel ID if there is a label to ensure we don't increment the counter
    {{ var panelId string }}
    if p.LabelFn != nil {
        {{ panelId = BuildPanelID("panel-group", p.PanelIndex, "group") }}
    }

    <div class={ "panel", "panel-group", "collapsible", p.Panel.ClassName() } data-controller="panel" data-panel-panel-value={ panelId }>
        if p.LabelFn != nil {
            <div class="panel__heading" data-panel-target="heading">

                <a class="panel__icon" data-panel-target="linkIcon" href={ templ.SafeURL(fmt.Sprintf("#%s", panelId)) }>
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="link-logo" viewBox="0 0 16 16">
                      <path d="M4.715 6.542 3.343 7.914a3 3 0 1 0 4.243 4.243l1.828-1.829A3 3 0 0 0 8.586 5.5L8 6.086a1 1 0 0 0-.154.199 2 2 0 0 1 .861 3.337L6.88 11.45a2 2 0 1 1-2.83-2.83l.793-.792a4 4 0 0 1-.128-1.287z"/>
                      <path d="M6.586 4.672A3 3 0 0 0 7.414 9.5l.775-.776a2 2 0 0 1-.896-3.346L9.12 3.55a2 2 0 1 1 2.83 2.83l-.793.792c.112.42.155.855.128 1.287l1.372-1.372a3 3 0 1 0-4.243-4.243z"/>
                    </svg>
                </a>

                {{ var label = p.LabelFn(ctx) }}
                <div class="panel__title" data-action="click->panel#toggle" id={ panelId }>
                    <label>@templ.Raw(label)</label>
                </div>

            </div>
        }

        if p.HelpTextFn != nil {
            <div class="panel__help">
                @templ.Raw(string(p.HelpTextFn(ctx)))
            </div>
        }

        <div class="panel__body">
            for _, panel := range p.Panels {
                @panel.Component()
            }
        </div>
    </div>
}

type BoundAlertPanel[T forms.Form] struct {
    Context context.Context
    Panel   *AlertPanel
    Request *http.Request
	Form    T
}

func (p *BoundAlertPanel[T]) Hidden() bool {
    return p.Panel == nil
}

func (p *BoundAlertPanel[T]) Render() template.HTML {
    var b bytes.Buffer
    p.Component().Render(p.Context, &b)
    return template.HTML(b.String())
}

templ (p *BoundAlertPanel[T]) Component() {
    if p.Panel == nil {
        {{ return nil }} // No panel to render
    }
    
    <div class={ "panel", "panel-alert", p.Panel.ClassName() }>
        <div class={ "alert", string(p.Panel.GetType())  }>
            if p.Panel.hasLabel() {
                <div class="alert-title">
                    @templ.Raw(p.Panel.GetLabel(p.Context))
                </div>
            }

            if p.Panel.TemplateFile != "" {
                {{ var html, err = tpl.Render(NewPanelContext(p.Request, p.Panel, p), p.Panel.TemplateFile) }}
                if err != nil {
                    {{ return err }}
                }
                @templ.Raw(string(html))
            } else {
                @templ.Raw(string(p.Panel.GetHTML(p.Context)))
            }
        </div>
    </div>
}

// boundTabPanel
// boundTabbedPanel

type boundTabPanel struct {
    title  func(context.Context) string
    panels []BoundPanel
}

type boundTabbedPanel struct {
    context  context.Context
    request  *http.Request
    panels   []*boundTabPanel
}

func (p *boundTabbedPanel) Render() template.HTML {
    var b bytes.Buffer
    p.Component().Render(p.context, &b)
    return template.HTML(b.String())
}

func (p *boundTabbedPanel) Hidden() bool {
    return len(p.panels) == 0
}

templ (p *boundTabbedPanel) Component() {
    <div class="panel tabpanel" data-controller="tabpanel">

        <div class="panel__body">
            <div class="tabpanel__controls">
                for i, tab := range p.panels {
                    <button class={ "tabpanel__control" } data-tabpanel-target="control" data-action="click->tabpanel#select" data-tabpanel-index-param={ strconv.Itoa(i) }>
                        @templ.Raw(tab.title(p.context))
                    </button>
                }
            </div>
            <div class="tabpanel__content">
                for i, tab := range p.panels {
                    <div class={ "tabpanel__panel" } data-tabpanel-target="tab" data-index={ strconv.Itoa(i) }>
                        for _, panel := range tab.panels {
                            @panel.Component()
                        }
                    </div>
                }
            </div>
        </div>

    </div>
}


type BoundJSONDetailPanel struct {
    Error       error
    Panel       JSONDetailPanel
    Request     *http.Request
    BoundFields []forms.BoundField
    BoundField  forms.BoundField
}

func (p *BoundJSONDetailPanel) Render() template.HTML {
    var b bytes.Buffer
    p.Component().Render(p.Request.Context(), &b)
    return template.HTML(b.String())
}

func (p *BoundJSONDetailPanel) Hidden() bool {
    return p.Panel.Classname == "hidden"
}

templ (p *BoundJSONDetailPanel) Component() {
    if p.Error != nil {
        {{ return p.Error }}
    }

    {{ var fieldName = p.BoundField.Name() }}
    {{ var label = p.BoundField.Label() }}
    {{ var helpText = p.BoundField.HelpText() }}
    {{ var panelId = BuildPanelID(fieldName, nil, slug.Make(fieldName)) }}
    <div class={ "panel", "panel-default", "collapsible", p.Panel.ClassName() } data-controller="panel" data-panel-panel-value={ panelId } data-panel-input-id={ p.BoundField.ID() }>
        if !p.Hidden() {
            <div class="panel__heading" data-panel-target="heading">

                <a class="panel__icon" data-panel-target="linkIcon" href={ templ.SafeURL(fmt.Sprintf("#%s", panelId)) }>
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="link-logo" viewBox="0 0 16 16">
                      <path d="M4.715 6.542 3.343 7.914a3 3 0 1 0 4.243 4.243l1.828-1.829A3 3 0 0 0 8.586 5.5L8 6.086a1 1 0 0 0-.154.199 2 2 0 0 1 .861 3.337L6.88 11.45a2 2 0 1 1-2.83-2.83l.793-.792a4 4 0 0 1-.128-1.287z"/>
                      <path d="M6.586 4.672A3 3 0 0 0 7.414 9.5l.775-.776a2 2 0 0 1-.896-3.346L9.12 3.55a2 2 0 1 1 2.83 2.83l-.793.792c.112.42.155.855.128 1.287l1.372-1.372a3 3 0 1 0-4.243-4.243z"/>
                    </svg>
                </a>

                <div class="panel__title" data-action="click->panel#toggle" id={ panelId }>
                    @templ.Raw(string(label))
                </div>

            </div>
        }

        if !p.Hidden() && helpText != "" {
            <div class="panel__help">
                @templ.Raw(string(helpText))
            </div>
        }

        if !p.Hidden() {
            <div class="panel__body" data-panel-target="content">
                for _, boundField := range p.BoundFields {
                    {{ var label = boundField.Label() }}
                    {{ var field = boundField.Field() }}
                    {{ var panelId = BuildPanelID("json-data-panel", nil, slug.Make(boundField.Name())) }}
                    <div class={ "panel", "panel-default" } data-controller="panel" data-panel-panel-value={ panelId } data-panel-input-id={ boundField.ID() }>
                        <div class="panel__heading" data-panel-target="heading">

                            <a class="panel__icon" data-panel-target="linkIcon" href={ templ.SafeURL(fmt.Sprintf("#%s", panelId)) }>
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="link-logo" viewBox="0 0 16 16">
                                  <path d="M4.715 6.542 3.343 7.914a3 3 0 1 0 4.243 4.243l1.828-1.829A3 3 0 0 0 8.586 5.5L8 6.086a1 1 0 0 0-.154.199 2 2 0 0 1 .861 3.337L6.88 11.45a2 2 0 1 1-2.83-2.83l.793-.792a4 4 0 0 1-.128-1.287z"/>
                                  <path d="M6.586 4.672A3 3 0 0 0 7.414 9.5l.775-.776a2 2 0 0 1-.896-3.346L9.12 3.55a2 2 0 1 1 2.83 2.83l-.793.792c.112.42.155.855.128 1.287l1.372-1.372a3 3 0 1 0-4.243-4.243z"/>
                                </svg>
                            </a>

                            <div class="panel__title" data-action="click->panel#toggle" id={ panelId }>
                                @templ.Raw(string(label))
                            </div>

                        </div>
                        <div class="panel__body" data-panel-target="content">
                            <div class="form-field-wrapper">
                                <div class="form-field">
                                    @templ.Raw(string(field))
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
    </div>
}

type BoundModelFormPanel[TARGET attrs.Definer, FORM modelforms.ModelForm[TARGET]] struct {
	Panel      *ModelFormPanel[TARGET, FORM]
    SourceModel attrs.Definer
    SourceField attrs.Field
    Forms       []modelforms.ModelForm[TARGET]
    Context     context.Context
    Request     *http.Request

	emptyForm modelforms.ModelForm[TARGET]
}

func (p *BoundModelFormPanel[TARGET, FORM]) validate() {
    if p.SourceModel == nil {
        panic("BoundModelFormPanel: SourceModel is nil")
    }
    if p.SourceField == nil {
        panic("BoundModelFormPanel: SourceField is nil")
    }
    if p.Context == nil {
        panic("BoundModelFormPanel: Context is nil")
    }
    if p.Request == nil {
        panic("BoundModelFormPanel: Request is nil")
    }
}

func (p *BoundModelFormPanel[TARGET, FORM]) Hidden() bool {
    p.validate()
    return p.Panel == nil
}

func (p *BoundModelFormPanel[TARGET, FORM]) Render() template.HTML {
    p.validate()
    var b bytes.Buffer
    p.Component().Render(p.Context, &b)
    return template.HTML(b.String())
}

func (p *BoundModelFormPanel[TARGET, FORM]) renderSingleFormPanel(form modelforms.ModelForm[TARGET], panelId string) templ.Component {
    var boundForm = form.BoundForm()
    var boundPanelForm = NewPanelBoundForm(p.Context, p.Request, p.SourceModel, form, boundForm, p.Panel.Panels)
    return PanelComponent{
        Classname:      "panel__forms__form collapsible",
        PanelId:        BuildPanelID("modelform-instance", nil, panelId),
        Heading: templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
            w.Write([]byte("<label>"))
            w.Write([]byte(html.EscapeString(attrs.ToString(form.Instance()))))
            w.Write([]byte("</label>"))
            return nil
        }),
        Body: p.renderSingleForm(form, boundPanelForm),
        Attrs: templ.Attributes{
            "id": fmt.Sprintf("id_%s", form.Prefix()),
        },
    }
}

templ (p *BoundModelFormPanel[TARGET, FORM]) renderSingleForm(form modelforms.ModelForm[TARGET], boundForm *PanelBoundForm) {
    {{ var idParam = "id_" + form.Prefix() }}
    <div class="modelform-panel__form">
        <div class="modelform-panel__form__body">
            for _, panel := range boundForm.BoundPanels {
                @panel.Component()
            }
        </div>
        <div class="modelform-panel__form__controls">
            <button type="button" class="btn btn-secondary" data-action="click->inline-panel#addFormAction" data-inline-panel-id-param={ idParam }>
                { trans.T(ctx, "Add") }
            </button>

            <button type="button" class="btn btn-secondary" data-action="click->inline-panel#removeFormAction" data-inline-panel-id-param={ idParam }>
                { trans.T(ctx, "Remove") }
            </button>
        </div>
    </div>
}

templ (p *BoundModelFormPanel[TARGET, FORM]) formsComponent() {
    if len(p.Forms) == 0 {
        {{ return nil }} // No forms to render
    }
    
    if p.emptyForm != nil {
        <template class="modelform-panel__empty-form" data-inline-panel-target="template">
            @p.renderSingleFormPanel(p.emptyForm, "__SLUGIFY(__PREFIX__)__")
        </template>
    }
    
    <div class="modelform-panel__forms" data-inline-panel-target="forms">
        for _, form := range p.Forms {
            @p.renderSingleFormPanel(form, slug.Make(form.Prefix()))
        }
    </div>
}

func (p *BoundModelFormPanel[TARGET, FORM]) Component() templ.Component {
    if p.Panel == nil {
        return templ.Raw("") // No panel to render
    }
    
    p.validate()

    var cls = "panel__forms"
    if p.Panel.ClassName() != "" {
        cls = fmt.Sprintf("%s %s", cls, p.Panel.ClassName())
    }

    return PanelComponent{
        Classname:      cls,
        PanelId:        BuildPanelID("modelform-panel", nil, slug.Make(p.SourceField.Name())),
        Heading: templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
            _, err = w.Write([]byte(p.SourceField.Label(ctx)))
            return err
        }),
        HelpText: templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
            _, err = w.Write([]byte(p.SourceField.HelpText(ctx)))
            return err
        }),
        Body: p.formsComponent(),
        Attrs: templ.Attributes{
            "data-controller": "inline-panel",
            "data-inline-panel-prefix-value": p.Panel.formPrefix("__INDEX__"),
        },
    }
}
