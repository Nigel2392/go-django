package admin

import (
	"io"
    "fmt"
	"html"
	"maps"
    "bytes"
	"strconv"
	"reflect"
    "context"
	"net/http"
    "html/template"
	"encoding/json"
	"runtime/debug"

	"github.com/gosimple/slug"

    "github.com/Nigel2392/go-django/src/forms"
	"github.com/Nigel2392/go-django/src/core/filesystem/tpl"
	"github.com/Nigel2392/go-django/src/core/attrs"
	"github.com/Nigel2392/go-django/src/forms/modelforms"
	"github.com/Nigel2392/go-django/src/utils/htmlutil"
	"github.com/Nigel2392/go-django/src/core/assert"
	"github.com/Nigel2392/go-django/src/core/trans"
	"github.com/Nigel2392/go-django/src/contrib/admin/icons"
	"github.com/Nigel2392/go-django/src/forms/formsets"
	"github.com/Nigel2392/go-django/src/core/contenttypes"
	"github.com/Nigel2392/go-django/src/core/logger"
	"github.com/Nigel2392/go-django/src/core/except"
)


templ PanelHeading(panelId string, allowPanelLink bool) {
    <div class="panel__heading" data-panel-target="heading">
        if panelId != "" && allowPanelLink {
            <a class="panel__icon" data-panel-target="linkIcon" href={ templ.SafeURL(fmt.Sprintf("#%s", panelId)) }>
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="link-logo" viewBox="0 0 16 16">
                  <path d="M4.715 6.542 3.343 7.914a3 3 0 1 0 4.243 4.243l1.828-1.829A3 3 0 0 0 8.586 5.5L8 6.086a1 1 0 0 0-.154.199 2 2 0 0 1 .861 3.337L6.88 11.45a2 2 0 1 1-2.83-2.83l.793-.792a4 4 0 0 1-.128-1.287z"/>
                  <path d="M6.586 4.672A3 3 0 0 0 7.414 9.5l.775-.776a2 2 0 0 1-.896-3.346L9.12 3.55a2 2 0 1 1 2.83 2.83l-.793.792c.112.42.155.855.128 1.287l1.372-1.372a3 3 0 1 0-4.243-4.243z"/>
                </svg>
            </a>
        }

        <div class="panel__title" data-action="click->panel#toggle" if panelId != "" { id={ panelId } }>
            { children... }
        </div>
    </div>
}

templ PanelErrors(errors []error) {
    if len(errors) > 0 {
        <div class="panel__errors">
            <ul>
                for _, err := range errors {
                    <li class="panel__error">@TextComponent(err)</li>
                }
                { children... }
            </ul>
        </div>
    }
}

templ PanelHelpText(helpText any) {
    {{
        var rV = reflect.ValueOf(helpText)
        if (rV.Kind() == reflect.Ptr || rV.Kind() == reflect.Interface || rV.Kind() == reflect.Func) && rV.IsNil() {
            return nil
        }
    }}

    if helpText != nil {
        <div class="panel__help">
            @TextComponent(helpText)
        </div>
    }
}

templ PanelBody() {
    <div class="panel__body" data-panel-target="content">
        { children... }
    </div>
}

func TextComponent(text any) templ.Component {
    if text == nil {
        return nil
    }

    var rV = reflect.ValueOf(text)
    if (rV.Kind() == reflect.Ptr || rV.Kind() == reflect.Interface || rV.Kind() == reflect.Func) && rV.IsNil() {
        return nil
    }

    switch v := text.(type) {
    case templ.Component:
        return v
        
    case string:
        return templ.Raw(html.EscapeString(v))
        
    case template.HTML:
        return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
            _, err = w.Write([]byte(v))
            return err
        })
    
    case error:
        return templ.Raw(html.EscapeString(v.Error()))

    case func(context.Context) string:
        return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
            _, err = w.Write([]byte(html.EscapeString(v(ctx))))
            return err
        })

    case func(context.Context) template.HTML:
        return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
            _, err = w.Write([]byte(v(ctx)))
            return err
        })
    
    case func() string:
        return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
            _, err = w.Write([]byte(html.EscapeString(v())))
            return err
        })
    
    case func() template.HTML:
        return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
            _, err = w.Write([]byte(v()))
            return err
        })
    }

    assert.Fail("TextComponent: unsupported type %T", text)
    return nil
}

type PanelComponent struct {
    Classname      string
    PanelId        string
    Hidden         bool
    AllowPanelLink bool
    InputID        string
    Attrs          templ.Attributes
    Heading        templ.Component
    HelpText       templ.Component
    Body           templ.Component
    Errors         []error
}

func (p PanelComponent) Render(ctx context.Context, w io.Writer) error {
    return p.Component().Render(ctx, w)
}

func (p PanelComponent) panelAttrs() templ.Attributes {
    var attrs = make(templ.Attributes)
    maps.Copy(attrs, p.Attrs)
    var cls = []string{"panel"}
    if p.Classname != "" {
        cls = append(cls, p.Classname)
    }
    htmlutil.AppendAttrs(attrs, "class", cls)
    htmlutil.AppendAttrs(attrs, "data-controller", "panel")
    if p.PanelId != "" {
        attrs["data-panel-panel-value"] = p.PanelId
    }
    if p.InputID != "" {
        attrs["data-panel-input-id"] = p.InputID
    }
    return attrs
}

templ (p PanelComponent) Component() {
    <div { p.panelAttrs()... }>
        if !p.Hidden && p.Heading != nil {
            @PanelHeading(p.PanelId, p.AllowPanelLink) {
                @p.Heading
            }
        }

        @PanelErrors(p.Errors)

        if !p.Hidden && p.HelpText != nil {
            @PanelHelpText(p.HelpText)
        }

        @PanelBody() {
            @p.Body
        }
    </div>
}

type WidgetPanelComponent struct {
    BoundField forms.BoundField
}

func (p WidgetPanelComponent) Render(ctx context.Context, w io.Writer) error {
    var panelComponent = PanelComponent{
        Attrs:     nil,
        Classname: "panel-default collapsible",
        AllowPanelLink: true,
        PanelId:   BuildPanelID("", nil, slug.Make(p.BoundField.Name())),
        Hidden:    p.BoundField.Hidden(),
        Errors:    p.BoundField.Errors(),
    }

    panelComponent.Heading = TextComponent(p.BoundField.Label)

    if helpText := p.BoundField.HelpText(); helpText != "" {
        panelComponent.HelpText = TextComponent(helpText)
    }

    panelComponent.Body = templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
        _, err = w.Write([]byte(`<div class="form-field-wrapper"><div class="form-field">`))
        if err != nil {
            return err
        }
        _, err = w.Write([]byte(p.BoundField.Field()))
        if err != nil {
            return err
        }
        _, err = w.Write([]byte(`</div></div>`))
        return err
    })
    return panelComponent.Render(ctx, w)
}

type BoundFormPanel[T forms.Form, P Panel] struct {
	forms.BoundField
    Context context.Context
    Request *http.Request
    Panel P
	Form T
}

func (p *BoundFormPanel[T, P]) Render() template.HTML {
    var b bytes.Buffer
    p.Component().Render(p.Context, &b)
    return template.HTML(b.String())
}

templ (p *BoundFormPanel[T, P]) Component() {
    @WidgetPanelComponent{ BoundField: p.BoundField }
}

type BoundTitlePanel[T forms.Form, P Panel] struct {
	BoundPanel
	Panel   P
    OutputIds []string
    Context context.Context
    Request *http.Request
}

func (p *BoundTitlePanel[T, P]) Render() template.HTML {
    var b bytes.Buffer
    p.Component().Render(p.Context, &b)
    return template.HTML(b.String())
}

func (p *BoundTitlePanel[T, P]) encodeOutputIDs() string {
    if len(p.OutputIds) == 0 {
        return "[]"
    }
    var b, _ = json.Marshal(p.OutputIds)
    return string(b)
}

templ (p *BoundTitlePanel[T, P]) Component() {
    if p.Hidden() {
        @p.BoundPanel.Component()
        {{ return nil }}
    }

    <div class={ "panel", "panel-title", p.Panel.ClassName() } data-controller="titlepanel" data-titlepanel-outputids-value={ p.encodeOutputIDs() }>
        <div class="panel__body">
            @p.BoundPanel.Component()
        </div>
    </div>
}

type BoundRowPanel[T forms.Form] struct {
    LabelFn func(context.Context) string
    HelpTextFn func(context.Context) string
    Panel   *rowPanel
    PanelIndex map[string]int
    Context context.Context
    Request *http.Request
    Panels  []BoundPanel
    Form    T
}

func (p *BoundRowPanel[T]) Hidden() bool {
    return false // RowPanel is never hidden
}

func (p *BoundRowPanel[T]) Render() template.HTML {
    var b bytes.Buffer
    p.Component().Render(p.Context, &b)
    return template.HTML(b.String())
}

templ (p *BoundRowPanel[T]) Component() {
    // if there is no label, there is nothing to link to, there wont be an icon.
    // only create the panel ID if there is a label to ensure we don't increment the counter
    {{ var panelId string }}
    if p.LabelFn != nil {
        {{ panelId = BuildPanelID("panel-row", p.PanelIndex, "row") }}
    }

    <div class={ "panel", "panel-row", "collapsible", p.Panel.ClassName() } data-controller="panel" data-panel-panel-value={ panelId }>
        if p.LabelFn != nil {
            @PanelHeading(panelId, true) {
                <label>@TextComponent(p.LabelFn)</label>
            }
        }

        @PanelHelpText(p.HelpTextFn)

        @PanelBody() {
            for _, panel := range p.Panels {
                @panel.Component()
            }
        }
    </div>
}

type BoundPanelGroup[T forms.Form] struct {
    BoundPanel
    Panel   *panelGroup
    PanelIndex map[string]int
    LabelFn func(context.Context) string
    HelpTextFn func(context.Context) string
    Context context.Context
    Request *http.Request
    Panels  []BoundPanel
    Form    T
}

func (p *BoundPanelGroup[T]) Render() template.HTML {
    var b bytes.Buffer
    p.Component().Render(p.Context, &b)
    return template.HTML(b.String())
}

templ (p *BoundPanelGroup[T]) Component() {
    // if there is no label, there is nothing to link to, there wont be an icon.
    // only create the panel ID if there is a label to ensure we don't increment the counter
    {{ var panelId string }}
    if p.LabelFn != nil {
        {{ panelId = BuildPanelID("panel-group", p.PanelIndex, "group") }}
    }

    <div class={ "panel", "panel-group", "collapsible", p.Panel.ClassName() } data-controller="panel" data-panel-panel-value={ panelId }>
        if p.LabelFn != nil {
            @PanelHeading(panelId, true) {
                <label>@TextComponent(p.LabelFn)</label>
            }
        }

        @PanelHelpText(p.HelpTextFn)

        @PanelBody() {
            for _, panel := range p.Panels {
                @panel.Component()
            }
        }
    </div>
}

type BoundAlertPanel[T forms.Form] struct {
    Context context.Context
    Panel   *AlertPanel
    Request *http.Request
	Form    T
}

func (p *BoundAlertPanel[T]) Hidden() bool {
    return p.Panel == nil
}

func (p *BoundAlertPanel[T]) Render() template.HTML {
    var b bytes.Buffer
    p.Component().Render(p.Context, &b)
    return template.HTML(b.String())
}

templ (p *BoundAlertPanel[T]) Component() {
    if p.Panel == nil {
        {{ return nil }} // No panel to render
    }
    
    <div class={ "panel", "panel-alert", p.Panel.ClassName() }>
        <div class={ "alert", string(p.Panel.GetType())  }>
            if p.Panel.hasLabel() {
                <div class="alert-title">
                    @TextComponent(p.Panel.GetLabel)
                </div>
            }

            if p.Panel.TemplateFile != "" {
                {{ var html, err = tpl.Render(NewPanelContext(p.Request, p.Panel, p), p.Panel.TemplateFile) }}
                if err != nil {
                    {{ return err }}
                }
                @templ.Raw(string(html))
            } else {
                @TextComponent(p.Panel.GetHTML)
            }
        </div>
    </div>
}

// boundTabPanel
// boundTabbedPanel

type boundTabPanel struct {
    title  func(context.Context) string
    panels []BoundPanel
}

type boundTabbedPanel struct {
    context  context.Context
    request  *http.Request
    panels   []*boundTabPanel
}

func (p *boundTabbedPanel) Render() template.HTML {
    var b bytes.Buffer
    p.Component().Render(p.context, &b)
    return template.HTML(b.String())
}

func (p *boundTabbedPanel) Hidden() bool {
    return len(p.panels) == 0
}

templ (p *boundTabbedPanel) Component() {
    <div class="panel tabpanel" data-controller="tabpanel">
        @PanelBody() {
            <div class="tabpanel__controls">
                for i, tab := range p.panels {
                    <button class={ "tabpanel__control" } data-tabpanel-target="control" data-action="click->tabpanel#select" data-tabpanel-index-param={ strconv.Itoa(i) }>
                        @TextComponent(tab.title)
                    </button>
                }
            </div>
            <div class="tabpanel__content">
                for i, tab := range p.panels {
                    <div class={ "tabpanel__panel" } data-tabpanel-target="tab" data-index={ strconv.Itoa(i) }>
                        for _, panel := range tab.panels {
                            @panel.Component()
                        }
                    </div>
                }
            </div>
        }
    </div>
}


type BoundJSONDetailPanel struct {
    Error       error
    Panel       JSONDetailPanel
    Request     *http.Request
    BoundFields []forms.BoundField
    BoundField  forms.BoundField
}

func (p *BoundJSONDetailPanel) Render() template.HTML {
    var b bytes.Buffer
    p.Component().Render(p.Request.Context(), &b)
    return template.HTML(b.String())
}

func (p *BoundJSONDetailPanel) Hidden() bool {
    return p.Panel.Classname == "hidden"
}

templ (p *BoundJSONDetailPanel) Component() {
    if p.Error != nil {
        {{ return p.Error }}
    }

    {{ var fieldName = p.BoundField.Name() }}
    {{ var label = p.BoundField.Label() }}
    {{ var helpText = p.BoundField.HelpText() }}
    {{ var panelId = BuildPanelID(fieldName, nil, slug.Make(fieldName)) }}
    <div class={ "panel", "panel-default", "collapsible", p.Panel.ClassName() } data-controller="panel" data-panel-panel-value={ panelId } data-panel-input-id={ p.BoundField.ID() }>
        if !p.Hidden() {
            @PanelHeading(panelId, true) {
                @templ.Raw(string(label))
            }
        }

        if !p.Hidden() && helpText != "" {
            @PanelHelpText(helpText)
        }

        if !p.Hidden() {
            @PanelBody() {
                for _, boundField := range p.BoundFields {
                    {{ var label = boundField.Label() }}
                    {{ var field = boundField.Field() }}
                    {{ var panelId = BuildPanelID("json-data-panel", nil, slug.Make(boundField.Name())) }}
                    <div class={ "panel", "panel-default" } data-controller="panel" data-panel-panel-value={ panelId } data-panel-input-id={ boundField.ID() }>

                        @PanelHeading(panelId, true) {
                            @templ.Raw(string(label))
                        }

                        @PanelBody() {
                            <div class="form-field-wrapper">
                                <div class="form-field">
                                    @templ.Raw(string(field))
                                </div>
                            </div>
                        }
                    </div>
                }
            }
        }
    </div>
}

type BoundModelFormPanel[TARGET attrs.Definer, FORM modelforms.ModelForm[TARGET]] struct {
	Panel      *ModelFormPanel[TARGET, FORM]
    Panels      []Panel
    SourceModel attrs.Definer
    SourceField attrs.Field
    FormSet     formsets.ListFormSet[modelforms.ModelForm[TARGET]]
    Context     context.Context
    Request     *http.Request
}

func (p *BoundModelFormPanel[TARGET, FORM]) validate() {
    if p.SourceModel == nil {
        panic("BoundModelFormPanel: SourceModel is nil")
    }
    if p.SourceField == nil {
        panic("BoundModelFormPanel: SourceField is nil")
    }
    if p.Context == nil {
        panic("BoundModelFormPanel: Context is nil")
    }
    if p.Request == nil {
        panic("BoundModelFormPanel: Request is nil")
    }
}

func (p *BoundModelFormPanel[TARGET, FORM]) Hidden() bool {
    p.validate()
    return p.Panel == nil
}

func (p *BoundModelFormPanel[TARGET, FORM]) Render() template.HTML {
    p.validate()
    var b bytes.Buffer
    p.Component().Render(p.Context, &b)
    return template.HTML(b.String())
}

templ (p *BoundModelFormPanel[TARGET, FORM]) renderSingleFormPanel(form modelforms.ModelForm[TARGET], label any, panelId string) {
    {{ panelId = BuildPanelID("modelform-instance", nil, panelId) }}

    {{ var boundForm = form.BoundForm() }}
    {{ var boundPanelForm = NewPanelBoundForm(p.Context, p.Request, form.Instance(), form, boundForm, p.Panels, nil) }}
    {{ var idParam = "id_" + form.Prefix() }}
    
    <div class={ "panel modelform-panel__forms__panel collapsible", p.Panel.SubClassname } data-controller="panel" data-panel-panel-value={ panelId } id={ idParam }>
        if label != nil {
            @PanelHeading(panelId, true) {
                <label>@TextComponent(label)</label>
            }
        }

        {{ var formErrors = form.ErrorList() }}
        {{ var boundFormErrors = form.BoundErrors() }}
        if len(formErrors) > 0 || boundFormErrors != nil && boundFormErrors.Len() > 0 {
            <div class="panel__errors">
                <ul>
                    for _, err := range formErrors {
                        <li class="panel__error"> { trans.T(ctx, "Form error:") } @TextComponent(err.Error())</li>
                    }

                    for head := boundFormErrors.Front(); head != nil; head = head.Next() {
                        {{ var field, ok = form.Field(head.Key) }}
                        {{ except.Assert(
                            ok || head.Key == "__all__", http.StatusInternalServerError, 
                            "Field %q not found in form %q", head.Key, form.Prefix()) 
                        }}
                        for _, err := range head.Value {
                            <li class="panel__error">
                                if field != nil {
                                    { field.Label(ctx) }: 
                                }
                                @TextComponent(err.Error())
                            </li>
                        }
                    }
                </ul>
            </div>
        }

        if !(p.Panel.MinNum > 0 && p.Panel.MinNum == p.Panel.MaxNum) && (!p.Panel.DisallowAdd || !p.Panel.DisallowRemove) {
            <div class="modelform-panel__forms__panel__controls">
                <div class="modelform-panel__forms__panel__controls__group">
                    if !p.Panel.DisallowAdd {
                        <button type="button" class="modelform-panel__form__controls--add modelform-panel__button add--start modelform-panel--sticky-scroll" data-action="click->inline-panel#addFormAction" data-inline-panel-id-param={ idParam } data-inline-panel-where-param="start" title={ trans.T(ctx, "Add") }>
                            @icons.Icon("icon-plus", map[string]string{
                                "aria-hidden": "true",
                            })
                        </button>
                    }
    
                    if !p.Panel.DisallowRemove {
                        <button type="button" class="modelform-panel__form__controls--remove modelform-panel__button modelform-panel--sticky-scroll" data-action="click->inline-panel#removeFormAction" data-inline-panel-id-param={ idParam } data-inline-panel-name-param={ form.PrefixName("__FIELD__") } title={ trans.T(ctx, "Remove") }>
                            @icons.Icon("icon-trash", map[string]string{
                                "aria-hidden": "true",
                            })
                        </button>
                    }
    
                    if !p.Panel.DisallowAdd {
                        <button type="button" class="modelform-panel__form__controls--add modelform-panel__button add--end modelform-panel--sticky-scroll" data-action="click->inline-panel#addFormAction" data-inline-panel-id-param={ idParam } data-inline-panel-where-param="end" title={ trans.T(ctx, "Add") }>
                            @icons.Icon("icon-plus", map[string]string{
                                "aria-hidden": "true",
                            })
                        </button>
                    }
                </div>
            </div>
        }

        @PanelBody() {
            <div class="modelform-panel__form">
                <div class="modelform-panel__form__body">
                    for _, panel := range boundPanelForm.BoundPanels {
                        @panel.Component()
                    }
                </div>
            </div>
        }
    </div>
}

templ (p *BoundModelFormPanel[TARGET, FORM]) formsComponent() {
    {{ defer func() {
        if r := recover(); r != nil {
            logger.Errorf("BoundModelFormPanel: panic: %v\n%s", r, debug.Stack()) 
            panic(fmt.Errorf("BoundModelFormPanel: %v", r)) 
        }
    }() }}

    {{ formList, err := p.FormSet.Forms() }}
    if err != nil {
        {{ return err }}
    }

    if len(formList) == 0 {
        {{ return nil }} // No forms to render
    }
    
    <template class="modelform-panel__empty-form" data-inline-panel-target="template">
        {{ var newForm = p.FormSet.NewForm(ctx) }}
        {{ newForm.SetPrefix(p.FormSet.PrefixName("__INDEX__")) }}
        @p.renderSingleFormPanel(newForm, contenttypes.NewContentType(newForm.Instance()).Model(), "__SLUGIFY(__PREFIX__)__")
    </template>
    
    if !(p.Panel.MinNum > 0 && p.Panel.MinNum == p.Panel.MaxNum) && !p.Panel.DisallowAdd {
        <div class="modelform-panel__forms__controls">
            <button type="button" class="modelform-panel__form__controls--add modelform-panel__button" data-action="click->inline-panel#addFormAction" data-inline-panel-index-param={ 0 } data-inline-panel-where-param="start" title={ trans.T(ctx, "Add") }>
                @icons.Icon("icon-plus", map[string]string{
                    "aria-hidden": "true",
                })
            </button>
        </div>
    }

    {{ var managementForm = p.FormSet.ManagementForm() }}
    if managementForm != nil {
        <div class="modelform-panel__management" data-inline-panel-target="management">
            {{ var boundForm = managementForm.BoundForm() }}
            for _, boundField := range boundForm.Fields() {
                @WidgetPanelComponent{ BoundField: boundField }
            }
            {{ 
                var errList = managementForm.ErrorList()
                var bndErrs = managementForm.BoundErrors()
            }}
            if len(errList) > 0 || bndErrs != nil && bndErrs.Len() > 0 {
                <div class="panel__errors">
                    <ul>
                        for head := bndErrs.Front(); head != nil; head = head.Next() {
                            {{ var field, ok = managementForm.Field(head.Key) }}
                            {{ except.Assert(
                                ok || head.Key == "__all__", http.StatusInternalServerError, 
                                "Field %q not found in management form", head.Key) 
                            }}
                            for _, err := range head.Value {
                                <li class="panel__error">
                                    if field != nil {
                                        { field.Label(ctx) }:
                                    }
                                    @TextComponent(err.Error())
                                </li>
                            }
                        }
                    </ul>
                </div>
            }
        </div>
    }

    <div class="modelform-panel__forms" data-inline-panel-target="forms">
        for _, form := range formList {
            @p.renderSingleFormPanel(form, contenttypes.NewContentType(form.Instance()).Model(), slug.Make(form.Prefix()))
        }
    </div>
}

func (p *BoundModelFormPanel[TARGET, FORM]) Component() templ.Component {
    if p.Panel == nil {
        return templ.Raw("") // No panel to render
    }
    p.validate()

    var cls = "modelform-panel"
    if p.Panel.ClassName() != "" {
        cls = fmt.Sprintf("%s %s", cls, p.Panel.ClassName())
    }

    var data, files = p.FormSet.Data()
    if !(data != nil || files != nil) {
        p.FormSet.Load()
    }

	var mgmtPrefix = ""
	if mgmt := p.FormSet.ManagementForm(); mgmt != nil {
		mgmtPrefix = mgmt.PrefixName("__FIELD__")
	}

	return PanelComponent{
		Classname: cls,
		PanelId:   BuildPanelID("modelform-panel", nil, slug.Make(p.SourceField.Name())),
		Heading:   TextComponent(p.SourceField.Label),
		HelpText:  TextComponent(p.SourceField.HelpText),
		Body:      p.formsComponent(),
		Errors:    p.FormSet.ErrorList(),
		Attrs: templ.Attributes{
			"data-controller":                     "inline-panel",
			"data-inline-panel-prefix-value":      p.Panel.formPrefix("__INDEX__"), // matches replace stmt in javascript
			"data-inline-panel-mgmt-prefix-value": mgmtPrefix,                      // matches replace stmt in javascript
			"data-inline-panel-min-forms-value":   p.Panel.MinNum,
			"data-inline-panel-max-forms-value":   p.Panel.MaxNum,
		},
	}
}
