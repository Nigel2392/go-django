package admin

import (
    "fmt"
    "bytes"
    "context"
	"net/http"
    "html/template"
    "github.com/Nigel2392/go-django/src/forms"
	"github.com/Nigel2392/go-django/src/core/filesystem/tpl"
	"strconv"
	"github.com/gosimple/slug"
)

type BoundFormPanel[T forms.Form, P Panel] struct {
	forms.BoundField
    Context context.Context
    Request *http.Request
    Panel P
	Form T
}

func (p *BoundFormPanel[T, P]) Render() template.HTML {
    var b bytes.Buffer
    p.Component().Render(p.Context, &b)
    return template.HTML(b.String())
}

templ (p *BoundFormPanel[T, P]) Component() {
    {{ var label = p.Label() }}
    {{ var errors = p.Errors() }}
    {{ var helpText = p.HelpText() }}
    {{ var field = p.Field() }}
    {{ var panelId = BuildPanelID("", nil, slug.Make(p.BoundField.Name())) }}

    <div class={ "panel", "panel-default", "collapsible", p.Panel.ClassName() } data-controller="panel" data-panel-panel-value={ panelId }>
        if !p.Hidden() {
            <div class="panel__heading" data-panel-target="heading">

                <a class="panel__icon" data-panel-target="linkIcon" href={ templ.SafeURL(fmt.Sprintf("#%s", panelId)) }>
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="link-logo" viewBox="0 0 16 16">
                      <path d="M4.715 6.542 3.343 7.914a3 3 0 1 0 4.243 4.243l1.828-1.829A3 3 0 0 0 8.586 5.5L8 6.086a1 1 0 0 0-.154.199 2 2 0 0 1 .861 3.337L6.88 11.45a2 2 0 1 1-2.83-2.83l.793-.792a4 4 0 0 1-.128-1.287z"/>
                      <path d="M6.586 4.672A3 3 0 0 0 7.414 9.5l.775-.776a2 2 0 0 1-.896-3.346L9.12 3.55a2 2 0 1 1 2.83 2.83l-.793.792c.112.42.155.855.128 1.287l1.372-1.372a3 3 0 1 0-4.243-4.243z"/>
                    </svg>
                </a>

                <div class="panel__title" data-action="click->panel#toggle" id={ panelId }>
                    @templ.Raw(string(label))
                </div>

            </div>
        }
        if len(errors) > 0 {
            <div class="panel__errors">
                <ul>
                    for _, err := range errors {
                        <li class="panel__error">@templ.Raw(string(err.Error()))</li>
                    }
                </ul>
            </div>
        }
        if !p.Hidden() && helpText != "" {
            <div class="panel__help">
                @templ.Raw(string(helpText))
            </div>
        }
        <div class="panel__body" data-panel-target="content">
            <div class="form-field-wrapper">
                <div class="form-field">
                    @templ.Raw(string(field))
                </div>
            </div>
        </div>
    </div>
}

type BoundTitlePanel[T forms.Form, P Panel] struct {
	BoundPanel
	Panel   P
    Context context.Context
    Request *http.Request
}

func (p *BoundTitlePanel[T, P]) Render() template.HTML {
    var b bytes.Buffer
    p.Component().Render(p.Context, &b)
    return template.HTML(b.String())
}

templ (p *BoundTitlePanel[T, P]) Component() {
    if p.Hidden() {
        @p.BoundPanel.Component()
        {{ return nil }}
    }

    <div class={ "panel", "panel-title", p.Panel.ClassName() }>
        <div class="panel__body">
            @p.BoundPanel.Component()
        </div>
    </div>
}

type BoundRowPanel[T forms.Form] struct {
    LabelFn func(context.Context) string
    HelpTextFn func(context.Context) string
    Panel   *rowPanel
    PanelIndex map[string]int
    Context context.Context
    Request *http.Request
    Panels  []BoundPanel
    Form    T
}

func (p *BoundRowPanel[T]) Hidden() bool {
    return false // RowPanel is never hidden
}

func (p *BoundRowPanel[T]) Render() template.HTML {
    var b bytes.Buffer
    p.Component().Render(p.Context, &b)
    return template.HTML(b.String())
}

templ (p *BoundRowPanel[T]) Component() {
    {{ var panelId string }}
    if p.LabelFn != nil {
        {{ panelId = BuildPanelID("panel-row", p.PanelIndex, "panel-row") }}
    }

    <div class={ "panel", "panel-row", "collapsible", p.Panel.ClassName() } data-controller="panel" data-panel-panel-value={ panelId }>
        if p.LabelFn != nil {
            <div class="panel__heading" data-panel-target="heading">

                <a class="panel__icon" data-panel-target="linkIcon" href={ templ.SafeURL(fmt.Sprintf("#%s", panelId)) }>
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="link-logo" viewBox="0 0 16 16">
                      <path d="M4.715 6.542 3.343 7.914a3 3 0 1 0 4.243 4.243l1.828-1.829A3 3 0 0 0 8.586 5.5L8 6.086a1 1 0 0 0-.154.199 2 2 0 0 1 .861 3.337L6.88 11.45a2 2 0 1 1-2.83-2.83l.793-.792a4 4 0 0 1-.128-1.287z"/>
                      <path d="M6.586 4.672A3 3 0 0 0 7.414 9.5l.775-.776a2 2 0 0 1-.896-3.346L9.12 3.55a2 2 0 1 1 2.83 2.83l-.793.792c.112.42.155.855.128 1.287l1.372-1.372a3 3 0 1 0-4.243-4.243z"/>
                    </svg>
                </a>

                <div class="panel__title" data-action="click->panel#toggle" id={ panelId }>
                    <label>@templ.Raw(p.LabelFn(ctx))</label>
                </div>

            </div>
        }

        if p.HelpTextFn != nil {
            <div class="panel__help">
                @templ.Raw(string(p.HelpTextFn(ctx)))
            </div>
        }

        <div class="panel__body" data-panel-target="content">
            for _, panel := range p.Panels {
                @panel.Component()
            }
        </div>
    </div>
}

type BoundPanelGroup[T forms.Form] struct {
    BoundPanel
    Panel   *panelGroup
    PanelIndex map[string]int
    LabelFn func(context.Context) string
    HelpTextFn func(context.Context) string
    Context context.Context
    Request *http.Request
    Panels  []BoundPanel
    Form    T
}

func (p *BoundPanelGroup[T]) Render() template.HTML {
    var b bytes.Buffer
    p.Component().Render(p.Context, &b)
    return template.HTML(b.String())
}

templ (p *BoundPanelGroup[T]) Component() {
    {{ var panelId string }}
    if p.LabelFn != nil {
        {{ panelId = BuildPanelID("panel-group", p.PanelIndex, "panel-group") }}
    }
    
    <div class={ "panel", "panel-group", "collapsible", p.Panel.ClassName() } data-controller="panel" data-panel-panel-value={ panelId }>
        if p.LabelFn != nil {
            <div class="panel__heading" data-panel-target="heading">

                <a class="panel__icon" data-panel-target="linkIcon" href={ templ.SafeURL(fmt.Sprintf("#%s", panelId)) }>
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="link-logo" viewBox="0 0 16 16">
                      <path d="M4.715 6.542 3.343 7.914a3 3 0 1 0 4.243 4.243l1.828-1.829A3 3 0 0 0 8.586 5.5L8 6.086a1 1 0 0 0-.154.199 2 2 0 0 1 .861 3.337L6.88 11.45a2 2 0 1 1-2.83-2.83l.793-.792a4 4 0 0 1-.128-1.287z"/>
                      <path d="M6.586 4.672A3 3 0 0 0 7.414 9.5l.775-.776a2 2 0 0 1-.896-3.346L9.12 3.55a2 2 0 1 1 2.83 2.83l-.793.792c.112.42.155.855.128 1.287l1.372-1.372a3 3 0 1 0-4.243-4.243z"/>
                    </svg>
                </a>

                <div class="panel__title" data-action="click->panel#toggle" id={ panelId }>
                    <label>@templ.Raw(p.LabelFn(ctx))</label>
                </div>

            </div>
        }

        if p.HelpTextFn != nil {
            <div class="panel__help">
                @templ.Raw(string(p.HelpTextFn(ctx)))
            </div>
        }

        <div class="panel__body">
            for _, panel := range p.Panels {
                @panel.Component()
            }
        </div>
    </div>
}

type BoundAlertPanel[T forms.Form] struct {
    Context context.Context
    Panel   *AlertPanel
    Request *http.Request
	Form    T
}

func (p *BoundAlertPanel[T]) Hidden() bool {
    return p.Panel == nil
}

func (p *BoundAlertPanel[T]) Render() template.HTML {
    var b bytes.Buffer
    p.Component().Render(p.Context, &b)
    return template.HTML(b.String())
}

templ (p *BoundAlertPanel[T]) Component() {
    if p.Panel == nil {
        {{ return nil }} // No panel to render
    }
    
    <div class={ "panel", "panel-alert", p.Panel.ClassName() }>
        <div class={ "alert", string(p.Panel.GetType())  }>
            if p.Panel.hasLabel() {
                <div class="alert-title">
                    @templ.Raw(p.Panel.GetLabel(p.Context))
                </div>
            }

            if p.Panel.TemplateFile != "" {
                {{ var html, err = tpl.Render(NewPanelContext(p.Request, p.Panel, p), p.Panel.TemplateFile) }}
                if err != nil {
                    {{ return err }}
                }
                @templ.Raw(string(html))
            } else {
                @templ.Raw(string(p.Panel.GetHTML(p.Context)))
            }
        </div>
    </div>
}

// boundTabPanel
// boundTabbedPanel

type boundTabPanel struct {
    title  func(context.Context) string
    panels []BoundPanel
}

type boundTabbedPanel struct {
    context  context.Context
    request  *http.Request
    panels   []*boundTabPanel
}

func (p *boundTabbedPanel) Render() template.HTML {
    var b bytes.Buffer
    p.Component().Render(p.context, &b)
    return template.HTML(b.String())
}

func (p *boundTabbedPanel) Hidden() bool {
    return len(p.panels) == 0
}

templ (p *boundTabbedPanel) Component() {
    <div class="panel tabpanel" data-controller="tabpanel">

        <div class="panel__body">
            <div class="tabpanel__controls">
                for i, tab := range p.panels {
                    <button class={ "tabpanel__control" } data-tabpanel-target="control" data-action="click->tabpanel#select" data-tabpanel-index-param={ strconv.Itoa(i) }>
                        @templ.Raw(tab.title(p.context))
                    </button>
                }
            </div>
            <div class="tabpanel__content">
                for i, tab := range p.panels {
                    <div class={ "tabpanel__panel" } data-tabpanel-target="tab" data-index={ strconv.Itoa(i) }>
                        for _, panel := range tab.panels {
                            @panel.Component()
                        }
                    </div>
                }
            </div>
        </div>

    </div>
}
