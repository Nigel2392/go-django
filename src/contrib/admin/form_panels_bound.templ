package admin

import (
    "bytes"
    "context"
    "github.com/Nigel2392/go-django/src/forms"
    "html/template"
	"github.com/Nigel2392/go-django/src/core/filesystem/tpl"
	"net/http"
)

type BoundPanel interface {
    Hidden() bool
	Component() templ.Component
	Render() template.HTML
}

type BoundFormPanel[T forms.Form, P Panel] struct {
	forms.BoundField
    Context context.Context
    Request *http.Request
    Panel P
	Form T
}

func (p *BoundFormPanel[T, P]) Render() template.HTML {
    var b bytes.Buffer
    p.Component().Render(p.Context, &b)
    return template.HTML(b.String())
}

templ (p *BoundFormPanel[T, P]) Component() {
    {{ var label = p.Label() }}
    {{ var errors = p.Errors() }}
    {{ var helpText = p.HelpText() }}
    {{ var field = p.Field() }}
    
    <div class="panel panel-default">
        if !p.Hidden() {
            <div class="panel__heading">
                <div class="panel__title">
                    @templ.Raw(string(label))
                </div>
            </div>
        }
        if len(errors) > 0 {
            <div class="panel__errors">
                <ul>
                    for _, err := range errors {
                        <li class="panel__error">@templ.Raw(string(err.Error()))</li>
                    }
                </ul>
            </div>
        }
        if !p.Hidden() && helpText != "" {
            <div class="panel__help">
                @templ.Raw(string(helpText))
            </div>
        }
        <div class="panel__body">
            <div class="form-field-wrapper">
                <div class="form-field">
                    @templ.Raw(string(field))
                </div>
            </div>
        </div>
    </div>
}

type BoundTitlePanel[T forms.Form, P Panel] struct {
	BoundPanel
    Context context.Context
    Request *http.Request
}

func (p *BoundTitlePanel[T, P]) Render() template.HTML {
    var b bytes.Buffer
    p.Component().Render(p.Context, &b)
    return template.HTML(b.String())
}

templ (p *BoundTitlePanel[T, P]) Component() {
    if p.Hidden() {
        @p.BoundPanel.Component()
        {{ return nil }}
    }

    <div class="panel panel-title">
        <div class="panel__body">
            @p.BoundPanel.Component()
        </div>
    </div>
}

type BoundRowPanel[T forms.Form] struct {
    LabelFn func() string
    Context context.Context
    Request *http.Request
    Panels []BoundPanel
    Form T
}

func (p *BoundRowPanel[T]) Hidden() bool {
    return false // RowPanel is never hidden
}

func (p *BoundRowPanel[T]) Render() template.HTML {
    var b bytes.Buffer
    p.Component().Render(p.Context, &b)
    return template.HTML(b.String())
}

templ (p *BoundRowPanel[T]) Component() {
    <div class="panel panel-row">
        if p.LabelFn != nil {
            <div class="panel__heading">
                <div class="panel__title">
                    @templ.Raw(p.LabelFn())
                </div>
            </div>
        }
        <div class="panel__body">
            for _, panel := range p.Panels {
                @panel.Component()
            }
        </div>
    </div>
}

type BoundPanelGroup[T forms.Form] struct {
    BoundPanel
    Context context.Context
    Request *http.Request
    Panels  []BoundPanel
    Form    T
}

func (p *BoundPanelGroup[T]) Render() template.HTML {
    var b bytes.Buffer
    p.Component().Render(p.Context, &b)
    return template.HTML(b.String())
}

templ (p *BoundPanelGroup[T]) Component() {
    <div class="panel panel-group">
        <div class="panel__body">
            for _, panel := range p.Panels {
                @panel.Component()
            }
        </div>
    </div>
}

type BoundAlertPanel[T forms.Form] struct {
    Context context.Context
    Panel   *AlertPanel
    Request *http.Request
	Form    T
}

func (p *BoundAlertPanel[T]) Hidden() bool {
    return p.Panel == nil
}

func (p *BoundAlertPanel[T]) Render() template.HTML {
    var b bytes.Buffer
    p.Component().Render(p.Context, &b)
    return template.HTML(b.String())
}

templ (p *BoundAlertPanel[T]) Component() {
    if p.Panel == nil {
        {{ return nil }} // No panel to render
    }
    
    <div class="panel panel-alert">
        <div class={ "alert", string(p.Panel.GetType())  }>
            if p.Panel.hasLabel() {
                <div class="alert-title">
                    @templ.Raw(p.Panel.GetLabel(p.Context))
                </div>
            }

            if p.Panel.TemplateFile != "" {
                {{ var html, err = tpl.Render(NewPanelContext(p.Request, p.Panel, p), p.Panel.TemplateFile) }}
                if err != nil {
                    {{ return err }}
                }
                @templ.Raw(string(html))
            } else {
                @templ.Raw(string(p.Panel.GetHTML(p.Context)))
            }
        </div>
    </div>
}