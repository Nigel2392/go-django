package menu

import "github.com/Nigel2392/go-django/src/forms/media"
import "github.com/Nigel2392/go-django/src/core/ctx"
import "github.com/Nigel2392/go-django/src/core/logger"
import "github.com/Nigel2392/go-django/src/core/filesystem/tpl"
import "runtime/debug"
import "net/http"
import "context"
import "slices"
import "io"

type SidePanels struct {
    ActivePanel string
    Panels      []SidePanel
}

func (p *SidePanels) HasPanels() bool {
    for _, panel := range p.Panels {
        if panel.IsShown() {
            return true
        }
    }
    return false
}

func (p *SidePanels) sortPanels(a, b SidePanel) int {
    var aOrder = a.Order()
    var bOrder = b.Order()
    if aOrder < bOrder {
        return -1
    } else if aOrder > bOrder {
        return 1
    }
    var aName = a.Name()
    var bName = b.Name()
    if aName < bName {
        return -1
    } else if aName > bName {
        return 1
    }
    return 0
}

templ icon(name string) {
    <svg class={ "icon", name }>
    	<use href={ "#" + name }></use>
    </svg>
}

templ (p *SidePanels) Component() {
    {{ var panels = slices.Clone(p.Panels) }}
    {{ slices.SortStableFunc(panels, p.sortPanels) }}

    <div class="side-panels" data-controller="side-panels" if p.ActivePanel != "" { data-side-panels-default-panel-id-value={ "panel__" + p.ActivePanel } }>
        <div class="side-panels__controls actions">
            for _, panel := range panels {
                if !panel.IsShown() {
                    {{ continue }}
                }
                <div class="side-panels__controls__control navigation__action"
                	data-side-panels-target="control"
			        data-side-panels-id-param={ "panel__" + panel.Name() }
			        data-action="click->side-panels#open">
                    <button type="button">
                        @panel.Icon()
                        { panel.Label() }
                    </button>
                </div>
            }
        </div>
        <div class="side-panels__content" data-side-panels-target="panels">
            for _, panel := range panels {
                if !panel.IsShown() {
                    {{ continue }}
                }
                <div class="side-panels__content__panel" data-side-panels-target="panel" id={ "panel__" + panel.Name() }>
                    <div class="side-panels__content__controls">
                        <button class="side-panels__content__control" data-action="click->side-panels#fullscreen">
                            <svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" class="side-panels__content__control__icon" viewBox="0 0 16 16">
	                            {{/* The MIT License (MIT) --> */}}
	                            {{/* Copyright (c) 2011-2024 The Bootstrap Authors --> */}}
                                <path d="M0 3.5A1.5 1.5 0 0 1 1.5 2h13A1.5 1.5 0 0 1 16 3.5v9a1.5 1.5 0 0 1-1.5 1.5h-13A1.5 1.5 0 0 1 0 12.5zM1.5 3a.5.5 0 0 0-.5.5v9a.5.5 0 0 0 .5.5h13a.5.5 0 0 0 .5-.5v-9a.5.5 0 0 0-.5-.5z"/>
                                <path d="M2 4.5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 0 1H3v2.5a.5.5 0 0 1-1 0zm12 7a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1 0-1H13V8.5a.5.5 0 0 1 1 0z"/>
                            </svg>
                        </button>
                        
                        <button class="side-panels__content__control" data-action="click->side-panels#close" data-side-panels-id-param={ "panel__" + panel.Name() }>
                            <svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" class="side-panels__content__control__icon" viewBox="0 0 16 16">
	                            {{/* The MIT License (MIT) --> */}}
	                            {{/* Copyright (c) 2011-2024 The Bootstrap Authors --> */}}
                                <path d="M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708"/>
                            </svg>
                        </button>
                    </div>
                    @panel.Content()
                </div>
            }
        </div>
    </div>

}

type BaseSidePanel struct {
    ID           string
    Ordering     int
    TemplateName string
    Request      *http.Request
	PanelIcon    string
    PanelLabel   func(ctx context.Context) string
    Hidden       func(p *BaseSidePanel, r *http.Request) bool
    PanelMedia   func(p *BaseSidePanel, r *http.Request) media.Media
    Context      func(p *BaseSidePanel, r *http.Request, c ctx.Context) ctx.Context
}

func (p *BaseSidePanel) Order() int {
    return p.Ordering
}

func (p *BaseSidePanel) Name() string {
    return p.ID
}

func (p *BaseSidePanel) IsShown() bool {
    if p.Hidden == nil {
        return true
    }
    return !p.Hidden(p, p.Request)
}

func (p *BaseSidePanel) Media() media.Media {
    if p.PanelMedia == nil {
        return nil
    }
    return p.PanelMedia(p, p.Request)
}

func (p *BaseSidePanel) Label() string {
    if p.PanelLabel == nil {
        return ""
    }
    return p.PanelLabel(p.Request.Context())
}

templ (p *BaseSidePanel) Icon() {
    if p.PanelIcon == "" {
       {{  return nil }}
    }
    @icon(p.PanelIcon)
}

templ (p *BaseSidePanel) Content() {
    <div class="side-panel" id={ p.ID }>
        <div class="side-panel__body">
            @p.panelContent()
        </div>
    </div>
}

func (p *BaseSidePanel) panelContent() templ.Component {
    return templ.ComponentFunc(func(c context.Context, w io.Writer) error {
        defer func() {
            if r := recover(); r != nil {
                logger.Fatalf(1, "Error rendering side panel %q: %v\n%s", p.ID, r, debug.Stack())
            }
        }()
        var context ctx.Context = ctx.RequestContext(p.Request)
        context.Set("panel", p)
        if p.Context != nil {
            context = p.Context(p, p.Request, context)
        }
        return tpl.FRender(w, context, p.TemplateName)
    })
}