// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.833
package columns

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import "github.com/Nigel2392/go-django/src/core/attrs"
import "github.com/Nigel2392/go-django/src/views/list"
import "github.com/Nigel2392/go-django/src/forms"
import "github.com/Nigel2392/go-django/src/forms/fields"
import "github.com/Nigel2392/go-django/src/forms/media"
import "net/http"
import "strings"

type sortableListColumn[T attrs.Definer] struct {
	list.ListColumn[T]
}

func (s *sortableListColumn[T]) FieldName() string {
	return s.ListColumn.FieldName()
}

func (s *sortableListColumn[T]) Media(defs attrs.StaticDefinitions) media.Media {
	if m, ok := s.ListColumn.(media.MediaDefiner); ok {
		return m.Media()
	}
	if m, ok := s.ListColumn.(list.ListMediaColumn); ok {
		return m.Media(defs)
	}
	return nil
}

func (s *sortableListColumn[T]) FormField(r *http.Request, row T) fields.Field {
	if editable, ok := s.ListColumn.(list.ListEditableColumn[T]); ok {
		return editable.FormField(r, row)
	}
	return nil
}

func (s *sortableListColumn[T]) EditableComponent(r *http.Request, defs attrs.Definitions, row T, form forms.Form, field *forms.BoundFormField) templ.Component {
	if editable, ok := s.ListColumn.(list.ListEditableColumn[T]); ok {
		return editable.EditableComponent(r, defs, row, form, field)
	}
	return s.Component(r, defs, row)
}

func (s *sortableListColumn[T]) Header(r *http.Request) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		var q = r.URL.Query()
		var asc = true
		var found bool
		var sortList = q["sort"]
		var fieldName = s.FieldName()
		for i, sort := range sortList {
			switch {
			case sort == fieldName:
				sortList[i] = "-" + fieldName
				asc = false
				found = true
			case strings.HasPrefix(sort, "-") && strings.HasSuffix(sort, fieldName) && strings.TrimPrefix(sort, "-") == fieldName:
				sortList[i] = fieldName
				asc = true
				found = true
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, " ")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			if found {
				if i > 0 {
					templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, " ")
					if templ_7745c5c3_Err != nil {
						return templ_7745c5c3_Err
					}
					var temp = sortList[i]
					copy(sortList[1:i+1], sortList[0:i])
					sortList[0] = temp
				}
				templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, " ")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				break
			}
		}
		if !found {
			sortList = append([]string{"-" + fieldName}, sortList...)
			asc = false
		}
		q["sort"] = sortList
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 4, "<a class=\"sortable-column\" href=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var2 templ.SafeURL = templ.URL("?" + q.Encode())
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(string(templ_7745c5c3_Var2)))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 5, "\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if asc {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 6, "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"sortable-column-icon\" viewBox=\"0 0 16 16\"><!-- The MIT License (MIT) --><!-- Copyright (c) 2011-2024 The Bootstrap Authors --><path d=\"M3.5 12.5a.5.5 0 0 1-1 0V3.707L1.354 4.854a.5.5 0 1 1-.708-.708l2-1.999.007-.007a.5.5 0 0 1 .7.006l2 2a.5.5 0 1 1-.707.708L3.5 3.707zm3.5-9a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7a.5.5 0 0 1-.5-.5M7.5 6a.5.5 0 0 0 0 1h5a.5.5 0 0 0 0-1zm0 3a.5.5 0 0 0 0 1h3a.5.5 0 0 0 0-1zm0 3a.5.5 0 0 0 0 1h1a.5.5 0 0 0 0-1z\"></path></svg>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		} else {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 7, "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" class=\"sortable-column-icon\" viewBox=\"0 0 16 16\"><!-- The MIT License (MIT) --><!-- Copyright (c) 2011-2024 The Bootstrap Authors --><path d=\"M3.5 2.5a.5.5 0 0 0-1 0v8.793l-1.146-1.147a.5.5 0 0 0-.708.708l2 1.999.007.007a.497.497 0 0 0 .7-.006l2-2a.5.5 0 0 0-.707-.708L3.5 11.293zm3.5 1a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7a.5.5 0 0 1-.5-.5M7.5 6a.5.5 0 0 0 0 1h5a.5.5 0 0 0 0-1zm0 3a.5.5 0 0 0 0 1h3a.5.5 0 0 0 0-1zm0 3a.5.5 0 0 0 0 1h1a.5.5 0 0 0 0-1z\"></path></svg>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 8, "<div class=\"sortable-column-header\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = s.ListColumn.Header(r).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 9, "</div></a>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
