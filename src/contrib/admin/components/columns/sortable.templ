package columns

import "github.com/Nigel2392/go-django/src/core/attrs"
import "github.com/Nigel2392/go-django/src/views/list"
import "github.com/Nigel2392/go-django/src/forms"
import "github.com/Nigel2392/go-django/src/forms/fields"
import "github.com/Nigel2392/go-django/src/forms/media"
import "net/http"
import "strings"

type sortableListColumn[T attrs.Definer] struct {
    list.ListColumn[T]
    attrs func(r *http.Request) map[string]any
}

func (s *sortableListColumn[T]) FieldName() string {
    return s.ListColumn.FieldName()
}

func (s *sortableListColumn[T]) Media(defs attrs.StaticDefinitions) media.Media {
    if m, ok := s.ListColumn.(media.MediaDefiner); ok {
        return m.Media()
    }
    if m, ok := s.ListColumn.(list.ListMediaColumn); ok {
        return m.Media(defs)
    }
    return nil
}

func (s *sortableListColumn[T]) FormField(r *http.Request, row T) fields.Field {
    if editable, ok := s.ListColumn.(list.ListEditableColumn[T]); ok {
        return editable.FormField(r, row)
    }
    return nil
}

func (s *sortableListColumn[T]) EditableComponent(r *http.Request, defs attrs.Definitions, row T, form forms.Form, field *forms.BoundFormField) templ.Component {
    if editable, ok := s.ListColumn.(list.ListEditableColumn[T]); ok {
        return editable.EditableComponent(r, defs, row, form, field)
    }
    return s.Component(r, defs, row)
}

func (s *sortableListColumn[T]) getAttrs(r *http.Request) map[string]any {
    if s.attrs != nil {
        return s.attrs(r)
    }
    return nil
}

templ (s *sortableListColumn[T]) Header(r *http.Request) {
    {{ var q = r.URL.Query() }}
    {{ var asc = true }}
    {{ var found bool }}
    {{ var sortList = q["sort"] }}
    {{ var fieldName = s.FieldName() }}
    for i, sort := range sortList {
        switch {
        case sort == fieldName:
            {{ sortList[i] = "-" + fieldName }}
            {{ asc = false }}
            {{ found = true }}
        case strings.HasPrefix(sort, "-")  && strings.HasSuffix(sort, fieldName)  && strings.TrimPrefix(sort, "-") == fieldName:
            {{ sortList[i] = fieldName }}
            {{ asc = true }}
            {{ found = true }}
        }

        if found {
            if i > 0 {
                // Move to front, and shift the rest to back.
                {{ var temp = sortList[i] }}
                {{ copy(sortList[1:i+1], sortList[0:i]) }}
                {{ sortList[0] = temp }}
            }
            {{ break }}
        }
    }

    if !found {
        {{ sortList = append([]string{"-" + fieldName}, sortList...) }}
        {{ asc = false }}
    }

    {{ q["sort"] = sortList }}

    <a class="sortable-column" href={ templ.URL("?" + q.Encode()) } { s.getAttrs(r)... }>
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="sortable-column-icon" viewBox="0 0 16 16">
		    	<!-- The MIT License (MIT) -->
		    	<!-- Copyright (c) 2011-2024 The Bootstrap Authors -->
                if asc {
                    <path d="M3.5 12.5a.5.5 0 0 1-1 0V3.707L1.354 4.854a.5.5 0 1 1-.708-.708l2-1.999.007-.007a.5.5 0 0 1 .7.006l2 2a.5.5 0 1 1-.707.708L3.5 3.707zm3.5-9a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7a.5.5 0 0 1-.5-.5M7.5 6a.5.5 0 0 0 0 1h5a.5.5 0 0 0 0-1zm0 3a.5.5 0 0 0 0 1h3a.5.5 0 0 0 0-1zm0 3a.5.5 0 0 0 0 1h1a.5.5 0 0 0 0-1z"/>
                } else {
                    <path d="M3.5 2.5a.5.5 0 0 0-1 0v8.793l-1.146-1.147a.5.5 0 0 0-.708.708l2 1.999.007.007a.497.497 0 0 0 .7-.006l2-2a.5.5 0 0 0-.707-.708L3.5 11.293zm3.5 1a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7a.5.5 0 0 1-.5-.5M7.5 6a.5.5 0 0 0 0 1h5a.5.5 0 0 0 0-1zm0 3a.5.5 0 0 0 0 1h3a.5.5 0 0 0 0-1zm0 3a.5.5 0 0 0 0 1h1a.5.5 0 0 0 0-1z"/>
                }
            </svg>
        <div class="sortable-column-header">
            @s.ListColumn.Header(r)
        </div>
    </a>
}
