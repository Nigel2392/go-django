package components

import (
    "fmt"
	"html"
)

templ Heading(level uint8, text string) {
    {{ var heading = fmt.Sprintf("h%d", level) }}
    {{ var headingTag = fmt.Sprintf("<%s class=\"heading__title\">%s</%s>", 
        heading, 
        html.EscapeString(text), 
        heading,
    ) }}
    {{ if level < 1 { level = 1 } else if level > 6 { level = 6 } }}
    <div class="heading">
        @templ.Raw(headingTag)
    </div>
}

templ Heading1(text string) {
    @Heading(1, text)
}

templ Heading2(text string) {
    @Heading(2, text)
}

templ Heading3(text string) {
    @Heading(3, text)
}

templ Heading4(text string) {
    @Heading(4, text)
}

templ Heading5(text string) {
    @Heading(5, text)
}

templ Heading6(text string) {
    @Heading(6, text)
}

templ Header(lvel int, headingText, subText string, components ...ShowableComponent) {
    {{ subtitleLevel := lvel + 2 }}
    {{ if subtitleLevel > 6 { subtitleLevel = 6 } }}
    {{ var className = []string{"header"} }}
    if subText == "" && len(components) > 0 {
        {{ className = append(className, "header-inline") }}
    }
    <header class={ className }>
        <div class="header__content">
            <div class="header__content__title">
                @Heading(uint8(lvel), headingText)
            </div>

            if subText != "" {
                <div class="header__content__subtitle">
                    @Heading(uint8(subtitleLevel), subText)
                </div>
            }
        </div>

        if len(components) > 0 {
            <div class="header__actions">
                for _, component := range components {
                    if !component.IsShown() {
                        {{ continue }}
                    }

                    <div class="header__actions__item">
                        @component
                    </div>
                }
            </div>
        }
    </header>
}