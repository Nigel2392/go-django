// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc {{ .SQLCVersion }}

package {{ .PackageName }};

import (
    "github.com/Nigel2392/go-django/src/models"
    "github.com/Nigel2392/go-django/src/core/attrs"
    "github.com/Nigel2392/go-django/src/forms/widgets"

    "context"
    "database/sql"
    "fmt"
    "reflect"
)

var globalDB *sql.DB

func SetDB(db *sql.DB) {
    globalDB = db
}
{{ $obj := . }}
{{ range $choices := $obj.Choices }}
var {{ $choices.Name }}Options = func() []widgets.Option {
    var options = make([]widgets.Option, {{ len $choices.Choices }})
    {{ range $i, $option := $choices.Choices }}
    options[{{ $i }}] = widgets.NewOption("{{ $option.Value }}", "{{ label $option.Name }}", "{{ $option.Value }}"){{ end }}
    return options
}
{{ end }}
{{ range $struct := $obj.Structs }}
const (
    insert{{$struct.Name}}Query = `INSERT INTO {{ $struct.TableName }} (
        {{ range $i, $field := $struct.Fields }}{{ if $i }}, {{ end }}{{ $field.ColumnName }}{{ end }}
    ) VALUES (
        {{ range $i, $field := $struct.Fields }}{{ if $i }}, {{ end }}{{ placeholder $i }}{{ end }}
    ) RETURNING id`

    update{{$struct.Name}}Query = `UPDATE {{ $struct.TableName }} SET
        {{ range $i, $field := $struct.Fields }}{{ if $i }}, {{ end }}{{ $field.ColumnName }} = {{ placeholder $i }}{{ end }}
        WHERE id = {{ placeholder }}`

    delete{{$struct.Name}}Query = `DELETE FROM {{ $struct.TableName }} WHERE id = {{ placeholder }}`
)

func (o *{{ $struct.Name }}) Save(ctx context.Context) error {
    if o.ID == 0 {
        return o.Insert(ctx)
    }
    return o.Update(ctx)
}

func (o *{{ $struct.Name }}) Insert(ctx context.Context) error {
    var id uint64
    var err = globalDB.QueryRowContext(
        ctx, insert{{$struct.Name}}Query,
        {{ range $i, $field := $struct.Fields }}{{ if $i }}, {{ end }}o.{{ $field.Name }}{{ end }},
    ).Scan(&id)
    if err != nil {
        return err
    }
    var v = reflect.ValueOf(o).Elem()
    var f = v.FieldByName("{{ $struct.PrimaryField }}")
    switch f.Kind() {
    case reflect.Uint, reflect.Uint8, reflect.Uint16, reflect.Uint32, reflect.Uint64:
        f.SetUint(id)
    case reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64:
        f.SetInt(int64(id))
    default:
        return fmt.Errorf("primary field type not supported: %s", f.Type().String())
    }
    return nil
}

func (o *{{ $struct.Name }}) Update(ctx context.Context) error {
    _, err := globalDB.ExecContext(
        ctx, update{{$struct.Name}}Query,
        {{ range $i, $field := $struct.Fields }}{{ if $i }}, {{ end }}o.{{ $field.Name }}{{ end }},
        o.{{ $struct.PrimaryField }},
    )
    return err
}

func (o *{{ $struct.Name }}) Delete(ctx context.Context) error {
    _, err := globalDB.ExecContext(ctx, delete{{$struct.Name}}Query, o.{{ $struct.PrimaryField }})
    return err
}

func (o *{{ $struct.Name }}) Reload(ctx context.Context) error {
    return globalDB.QueryRowContext(
        ctx, `SELECT ({{ range $i, $field := $struct.Fields }}{{ if $i }}, {{ end }}{{ $field.ColumnName }}{{ end }})
        FROM {{ $struct.TableName }}
        WHERE id = ?`,
        o.{{ $struct.PrimaryField }},
    ).Scan(
        {{ range $i, $field := $struct.Fields }}&o.{{ $field.Name }},{{ end }}
    )
}

func (o *{{ $struct.Name }}) FieldDefs() attrs.Definitions {
    var fields = make([]attrs.Field, {{ len $struct.Fields }})
    {{ range $i, $field := $struct.Fields }}{{ if $field.Choices }}
    var {{$field.Choices}}Widget = widgets.NewSelectInput(
        nil, {{ $field.Choices }}Options,
    ){{ end }}
    fields[{{ $i }}] = attrs.NewField(
        o, "{{ $field.Name }}", &attrs.FieldConfig{
            Null: {{ $field.Null }},
            Blank: {{ $field.Blank }},
            ReadOnly: {{ $field.ReadOnly }},{{ if $field.RelatedObjectName }}
            RelatedObject: &{{ $field.RelatedObjectName }}{},{{ end }}
            Label: "{{ label $field.Name }}",
            Primary: {{ $field.Primary }},{{ if $field.Choices }}
            FormWidget: func(attrs.FieldConfig) widgets.Widget {
                return {{$field.Choices}}Widget
            },{{ end }}
        },
    ){{ end }}
    return attrs.Define(o, fields...)
}
{{ end }}
var ({{ range $struct := $obj.Structs }}
    _ models.Saver    = &{{ $struct.Name }}{}
    _ models.Updater  = &{{ $struct.Name }}{}
    _ models.Deleter  = &{{ $struct.Name }}{}
    _ models.Reloader = &{{ $struct.Name }}{}
    _ attrs.Definer   = &{{ $struct.Name }}{}{{ end }}
)