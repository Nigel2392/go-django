// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc {{ .SQLCVersion }}

package {{ .PackageName }};

import (
    "github.com/Nigel2392/go-django/src/models"
    "github.com/Nigel2392/go-django/src/core/attrs"

    "context"
)
{{ $obj := . }}
{{ range $struct := $obj.Structs }}
const (
    insert{{$struct.Name}}Query = `INSERT INTO {{ $struct.TableName }} (
        {{ range $i, $field := $struct.Fields }}{{ if $i }}, {{ end }}{{ $field.ColumnName }}{{ end }}
    ) VALUES (
        {{ range $i, $field := $struct.Fields }}{{ if $i }}, {{ end }}{{ placeholder $i }}{{ end }}
    ) RETURNING {{ $struct.PrimaryField.ColumnName }}`

    update{{$struct.Name}}Query = `UPDATE {{ $struct.TableName }} SET
        {{ range $i, $field := $struct.Fields }}{{ if $i }}, {{ end }}{{ $field.ColumnName }} = {{ placeholder $i }}{{ end }}
        WHERE {{ $struct.PrimaryField.ColumnName }} = {{ placeholder }}`

    delete{{$struct.Name}}Query = `DELETE FROM {{ $struct.TableName }} WHERE {{ $struct.PrimaryField.ColumnName }} = {{ placeholder }}`
    
    select{{$struct.Name}}Query = `SELECT ({{ range $i, $field := $struct.Fields }}{{ if $i }}, {{ end }}{{ $field.ColumnName }}{{ end }})
        FROM {{ $struct.TableName }}
        WHERE {{ $struct.PrimaryField.ColumnName }} = {{ placeholder }}`
)

func (o *{{ $struct.Name }}) Save(ctx context.Context) error {
    if o.ID == 0 {
        return o.Insert(ctx)
    }
    return o.Update(ctx)
}

func (o *{{ $struct.Name }}) Insert(ctx context.Context) error {
    var id {{ $struct.PrimaryField.GoType }}
    var err = globalDB.QueryRowContext(
        ctx, insert{{$struct.Name}}Query,
        {{ range $i, $field := $struct.Fields }}{{ if $i }}, {{ end }}o.{{ $field.Name }}{{ end }},
    ).Scan(&id)
    if err != nil {
        return err
    }
    o.{{ $struct.PrimaryField.Name }} = id
    return nil
}

func (o *{{ $struct.Name }}) Update(ctx context.Context) error {
    _, err := globalDB.ExecContext(
        ctx, update{{$struct.Name}}Query,
        {{ range $i, $field := $struct.Fields }}{{ if $i }}, {{ end }}o.{{ $field.Name }}{{ end }},
        o.{{ $struct.PrimaryField.Name }},
    )
    return err
}

func (o *{{ $struct.Name }}) Delete(ctx context.Context) error {
    _, err := globalDB.ExecContext(ctx, delete{{$struct.Name}}Query, o.{{ $struct.PrimaryField.Name }})
    return err
}

func (o *{{ $struct.Name }}) Reload(ctx context.Context) error {
    return globalDB.QueryRowContext(
        ctx, select{{$struct.Name}}Query, o.{{ $struct.PrimaryField.Name }},
    ).Scan(
        {{ range $i, $field := $struct.Fields }}&o.{{ $field.Name }},{{ end }}
    )
}
{{ end }}
var ({{ range $struct := $obj.Structs }}
    _ models.Saver    = &{{ $struct.Name }}{}
    _ models.Updater  = &{{ $struct.Name }}{}
    _ models.Deleter  = &{{ $struct.Name }}{}
    _ models.Reloader = &{{ $struct.Name }}{}
    _ attrs.Definer   = &{{ $struct.Name }}{}{{ end }}
)