// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc {{ .SQLCVersion }}

package {{ .PackageName }};

import (
    "strings"

    "github.com/Nigel2392/go-django/src/core/contenttypes"
    "github.com/Nigel2392/go-django/src/contrib/admin"
)
{{ $obj := . }}

{{ range $struct := $obj.Structs }}
var _ = contenttypes.Register(&contenttypes.ContentTypeDefinition{
    ContentObject: &{{ $struct.Name }}{},
    GetInstance: func(id any) (interface{}, error) {
        return select{{ $struct.Name }}Interface(id)
    },
    GetInstances: func(limit, offset uint) ([]interface{}, error) {
        return list{{ $struct.PluralName }}Interface(limit, offset)
    },
    GetInstancesByIDs: func(ids []any) ([]interface{}, error) {
        return list{{ $struct.PluralName }}InterfaceForPrimaryKeys(ids)
    },
}){{ end }}

{{ range $struct := $obj.Structs }}
func Admin{{ $struct.Name }}ModelOptions() admin.ModelOptions {
    return admin.ModelOptions{
		RegisterToAdminMenu:    true,
        Model:                  &{{ $struct.Name }}{},
        Name:                   "{{ $struct.Name }}",
        AddView: admin.FormViewOptions{
            Panels: []admin.Panel{ {{ range $i, $field := $struct.Fields }}
                admin.FieldPanel("{{ $field.Name }}"),{{ end }}
            },
        },
        EditView: admin.FormViewOptions{
            Panels: []admin.Panel{ {{ range $i, $field := $struct.Fields }}
                admin.FieldPanel("{{ $field.Name }}"),{{ end }}
            },
        },
        ListView: admin.ListViewOptions{
            ViewOptions: admin.ViewOptions{
                Fields: []string{
                    {{ range $i, $field := $struct.Fields }}"{{ $field.Name }}",{{ end }}
                },
            },
            PerPage: 10,
        },
    }
}
{{ end }}
{{ range $struct := $obj.Structs }}
const (
    list{{$struct.Name}}AdminQuery = `SELECT {{ range $i, $field := $struct.Fields }}{{ if $i }}, {{ end }}{{ $field.ColumnName }}{{ end }}
        FROM {{ $struct.TableName }}
        ORDER BY {{ $struct.PrimaryField.ColumnName }} ASC
        LIMIT {{ placeholder }} OFFSET {{ placeholder }}`

    list{{$struct.Name}}ForPrimaryKeysAdminQuery = `SELECT {{ range $i, $field := $struct.Fields }}{{ if $i }}, {{ end }}{{ $field.ColumnName }}{{ end }}
        FROM {{ $struct.TableName }}
        WHERE {{ $struct.PrimaryField.ColumnName }} IN ({%PLACEHOLDER%})`

    select{{$struct.Name}}AdminQuery = `SELECT {{ range $i, $field := $struct.Fields }}{{ if $i }}, {{ end }}{{ $field.ColumnName }}{{ end }}
        FROM {{ $struct.TableName }}
        WHERE {{ $struct.PrimaryField.ColumnName }} = {{ placeholder }}`
)

func Select{{ $struct.Name }}(id {{ $struct.PrimaryField.GoType }}) (*{{ $struct.Name }}, error) {
    var c, err = select{{ $struct.Name }}Interface(id)
    if err != nil {
        return nil, err
    }
    return c.(*{{ $struct.Name }}), nil
}

func List{{ $struct.PluralName }}(limit, offset int32) ([]*{{ $struct.Name }}, error) {
    var rows, err = globalDB.Query(list{{$struct.Name}}AdminQuery, limit, offset)
    if err != nil {
        return nil, err
    }
    defer rows.Close()
    var objects = make([]*{{ $struct.Name }}, 0)
    for rows.Next() {
        var o = &{{ $struct.Name }}{}
        err = rows.Scan(
            {{ range $i, $field := $struct.Fields }}&o.{{ $field.Name }},{{ end }}
        )
        if err != nil {
            return nil, err
        }
        objects = append(objects, o)
    }
    return objects, nil
}

func List{{ $struct.PluralName }}ForPrimaryKeys(ids []interface{}) ([]*{{ $struct.Name }}, error) {
    var query = list{{$struct.Name}}ForPrimaryKeysAdminQuery
    var placeholders = make([]string, len(ids))
    var values = make([]interface{}, len(ids) + 2)
    for i := range ids {
        placeholders[i] = "{{ placeholder }}"
        values[i] = ids[i]
    }
    query = strings.ReplaceAll(
        query,
        "{%PLACEHOLDER%}",
        strings.Join(placeholders, ", "),
    )
    var rows, err = globalDB.Query(query, values...)
    if err != nil {
        return nil, err
    }
    defer rows.Close()
    var objects = make([]*{{ $struct.Name }}, 0)
    for rows.Next() {
        var o = &{{ $struct.Name }}{}
        err = rows.Scan(
            {{ range $i, $field := $struct.Fields }}&o.{{ $field.Name }},{{ end }}
        )
        if err != nil {
            return nil, err
        }
        objects = append(objects, o)
    }
    return objects, nil
}

func select{{ $struct.Name }}Interface(id any) (interface{}, error) {
    var o = &{{ $struct.Name }}{}
    err := globalDB.QueryRow(select{{$struct.Name}}AdminQuery, id).Scan(
        {{ range $i, $field := $struct.Fields }}&o.{{ $field.Name }},{{ end }}
    )
    if err != nil {
        return nil, err
    }
    return o, nil
}

func list{{ $struct.PluralName }}InterfaceForPrimaryKeys(ids []any) ([]interface{}, error) {
    var rows, err = List{{ $struct.PluralName }}ForPrimaryKeys(ids)
    if err != nil {
        return nil, err
    }
    var objects = make([]interface{}, len(rows))
    for i, row := range rows {
        objects[i] = row
    }
    return objects, nil
}

func list{{ $struct.PluralName }}Interface(limit, offset uint) ([]interface{}, error) {
    var rows, err = List{{ $struct.PluralName }}(int32(limit), int32(offset))
    if err != nil {
        return nil, err
    }
    var objects = make([]interface{}, len(rows))
    for i, row := range rows {
        objects[i] = row
    }
    return objects, nil
}
{{ end }}
