package main

import (
	"database/sql"

	django "github.com/Nigel2392/go-django/src"
	"github.com/Nigel2392/go-django/src/contrib/admin"
	"github.com/Nigel2392/go-django/src/contrib/auth"
	"github.com/Nigel2392/go-django/src/contrib/pages"
	"github.com/Nigel2392/go-django/src/contrib/reports"
	auditlogs "github.com/Nigel2392/go-django/src/contrib/reports/audit_logs"
	auditlogs_sqlite "github.com/Nigel2392/go-django/src/contrib/reports/audit_logs/audit_logs_sqlite"
	"github.com/Nigel2392/go-django/src/contrib/session"
	"github.com/Nigel2392/go-django/src/core/logger"
	$( packageString .ProjectName ) "$( .ModulePath )/src/$( .ProjectName )"

	_ "github.com/Nigel2392/go-django/src/contrib/pages/backend-sqlite"
	_ "github.com/mattn/go-sqlite3"
)

func main() {

	var app = django.App(
		django.Configure(map[string]interface{}{
			"ALLOWED_HOSTS": []string{"*"},
			"DEBUG":         false,
			"HOST":          "0.0.0.0",
			"PORT":          "8080",
			"DATABASE": func() *sql.DB {
				var db, err = sql.Open("sqlite3", "./db.sqlite3")
				if err != nil {
					panic(err)
				}
				auditlogs.RegisterBackend(
					auditlogs_sqlite.NewSQLiteStorageBackend(db),
				)
				return db
			}(),
			// django.APPVAR_RECOVERER: false,

			"AUTH_EMAIL_LOGIN": true,
		}),

		django.Apps(
			session.NewAppConfig,
			auth.NewAppConfig,
			admin.NewAppConfig,
			pages.NewAppConfig,
			auditlogs.NewAppConfig,
			reports.NewAppConfig,
			$( packageString .ProjectName ).NewAppConfig,
		),
	)

	var err = app.Initialize()
	if err != nil {
		panic(err)
	}

	app.Log.SetLevel(
		logger.DBG,
	)

	if err := app.Serve(); err != nil {
		panic(err)
	}
}
