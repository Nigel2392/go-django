package main

import (
	"context"
	"fmt"
	"net/mail"
	"os"

	"github.com/Nigel2392/go-django/examples/todoapp/todos"
	queries "github.com/Nigel2392/go-django/queries/src"
	"github.com/Nigel2392/go-django/queries/src/drivers"
	"github.com/Nigel2392/go-django/queries/src/migrator"
	django "github.com/Nigel2392/go-django/src"
	"github.com/Nigel2392/go-django/src/contrib/admin"
	"github.com/Nigel2392/go-django/src/contrib/auth"
	"github.com/Nigel2392/go-django/src/contrib/messages"
	"github.com/Nigel2392/go-django/src/contrib/reports"
	auditlogs "github.com/Nigel2392/go-django/src/contrib/reports/audit_logs"
	"github.com/Nigel2392/go-django/src/contrib/revisions"
	"github.com/Nigel2392/go-django/src/contrib/session"
	"github.com/Nigel2392/go-django/src/core/attrs"
	"github.com/Nigel2392/go-django/src/core/checks"
	"github.com/Nigel2392/go-django/src/core/logger"
)

func main() {
	// Ensure the private directory exists
	os.MkdirAll("./.private/todoapp", 0755)

	// Setup the database connection
	var db, err = drivers.Open(context.Background(), "sqlite3", "./.private/todoapp/db.sqlite3")
	if err != nil {
		panic(err)
	}

	// On first setup, the database will be empty.
	// No tables have been created yet.
	//
	// Migrations should first be generated
	// and then applied to the database.
	//
	// These migrations can be generated by running:
	// go run <my_executable> makemigrations
	//
	// And then applied by running:
	// go run <my_executable> migrate
	//
	// If migrations are not applied,
	// the application will panic due to
	// checks in the migrator package failing.

	var app = django.App(
		// Configure the go-django application
		django.Configure(map[string]interface{}{
			django.APPVAR_ALLOWED_HOSTS: []string{"*"},
			django.APPVAR_DEBUG:         true,
			django.APPVAR_HOST:          "127.0.0.1",
			django.APPVAR_PORT:          "8080",
			django.APPVAR_DATABASE:      db,
			// django.APPVAR_RECOVERER:     false,

			auth.APPVAR_AUTH_EMAIL_LOGIN:  true,
			migrator.APPVAR_MIGRATION_DIR: "./.private/todoapp/migrations",
		}),

		// Initialize the logger for the application
		django.AppLogger(&logger.Logger{
			Level:       logger.DBG,
			OutputTime:  true,
			WrapPrefix:  logger.ColoredLogWrapper,
			OutputDebug: os.Stdout,
			OutputInfo:  os.Stdout,
			OutputWarn:  os.Stdout,
			OutputError: os.Stdout,
		}),

		// Add apps to the application's app registry
		// It is OK to either pass the NewAppConfig function
		// or the app config struct directly.
		django.Apps(
			session.NewAppConfig,
			auth.NewAppConfig,
			admin.NewAppConfig,
			messages.NewAppConfig,
			revisions.NewAppConfig(),
			auditlogs.NewAppConfig,
			reports.NewAppConfig(),
			migrator.NewAppConfig,
			todos.NewAppConfig,
		),
	)

	// Ignore these checks
	// They will be discarded.
	checks.Shutup("model.cant_check", true)
	checks.Shutup("auth.login_redirect_url_not_set", true)
	checks.Shutup("admin.model_not_fully_implemented", true)
	checks.Shutup("field.invalid_db_type", func(m checks.Message) bool {
		return m.Object.(attrs.Field).Name() == "GroupPermissions"
	})

	// Initialize the application
	err = app.Initialize()
	if err != nil {
		panic(err)
	}

	// Create a new user instance if it did not exist
	// already, this will be the (demo) admin user.
	//
	// The user will have the following credentials:
	//
	// Username: 	admin
	// Email: 		admin@localhost
	// Password: 	Administrator123!
	//
	// You can log in to the admin interface at
	// http://127.0.0.1:8080/admin/login/
	var user = &auth.User{}
	var e, _ = mail.ParseAddress("admin@localhost")
	user.Email = (*drivers.Email)(e)
	user.Username = "admin"
	user.IsAdministrator = true
	user.IsActive = true
	user.SetPassword("Administrator123!")

	user, _, err = queries.
		GetQuerySet(&auth.User{}).
		Preload("EntrySet").
		Filter("Email", e.Address).
		GetOrCreate(user)

	if err != nil {
		panic(fmt.Errorf("failed to create admin user: %w", err))
	}

	logger.Infof("Admin user created: %v %s %s %t %t", user.ID, user.Username, user.Email, user.IsAdministrator, user.IsActive)

	// Query the user's audit logs
	// This is accessed through the DataStore because it is a reverse foreign key relation.
	var entrySet, ok = user.DataStore().GetValue("EntrySet")
	if !ok {
		panic("EntrySet not found in user data store")
	}

	entries, ok := entrySet.(*queries.RelRevFK[attrs.Definer])
	if !ok {
		panic(fmt.Errorf("EntrySet is not a slice of *auditlogs.Entry, got %T", entrySet))
	}

	for _, entry := range entries.AsList() {
		entry := entry.(*auditlogs.Entry)
		logger.Infof("Entry: %v %v %v %v", entry.ID, entry.Src, entry.Usr, entry.ObjectID)
	}

	// Query all created todos
	if len(os.Args) == 1 {
		todoItems, err := queries.GetQuerySet(&todos.Todo{}).All()
		if err != nil {
			panic(fmt.Errorf("failed to get blog pages: %w", err))
		}
		fmt.Println("Todos:", len(todoItems))
		for todo := range todoItems.Objects() {
			fmt.Printf(" - %q (ID: %d, %+v)\n", todo.Title, todo.ID, todo)
		}
	}

	if err := app.Serve(); err != nil {
		panic(err)
	}
}
